/*-
* Copyright (c) 2014-present MongoDB, Inc.
 * Copyright (c) 2008-2014 WiredTiger, Inc.
 *	All rights reserved.
 *
 * See the file LICENSE for redistribution information.
 */

#include <catch2/catch.hpp>
#include <iostream>
#include <vector>
#include <zstd.h>

#include "wt_internal.h"


static unsigned char hello_world[] = "Hello, World!";

std::vector<unsigned char> hello_world_bytes = {
    0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21
  };

std::vector<unsigned char> hello_world_bytes_zst = {
    0x28, 0xb5, 0x2f, 0xfd, 0x24, 0x0d, 0x69, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20,
    0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x76, 0x94, 0x6f, 0x8b
  };

std::vector<unsigned char> compressed_data_from_issue =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x3c, 0x1e,
    0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x15, 0x07, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x81, 0x30, 0x30, 0x30, 0x32, 0x38, 0x31, 0x37,
    0x34, 0x31, 0x36, 0x2e, 0x30, 0x30, 0x2f, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
    0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xb5, 0x2f, 0xfd, 0x60, 0xa8, 0x02, 0x4d,
    0x06, 0x00, 0x64, 0x07, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x43, 0x30, 0x30,
    0x30, 0x32, 0x38, 0x31, 0x37, 0x34, 0x31, 0x36, 0x2f, 0x75, 0x4d, 0x4e, 0x4f, 0x50, 0x71, 0x37,
    0x2e, 0x30, 0x30, 0x2f, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x23, 0x8d, 0x38,
    0x67, 0x68, 0x69, 0x85, 0x39, 0x81, 0x32, 0x30, 0x80, 0xc1, 0x31, 0x2f, 0x56, 0x51, 0x52, 0x53,
    0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
    0x4a, 0x4b, 0x4c, 0x75, 0x31, 0x43, 0x2f, 0x69, 0x89, 0x32, 0x47, 0x2f, 0x6d, 0x81, 0x33, 0x95,
    0x34, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x34, 0x2f, 0x53, 0x32, 0x35, 0x35, 0x2f, 0x4c, 0x8d, 0x36,
    0x37, 0x2f, 0x6d, 0x4d, 0x85, 0x37, 0x37, 0x2f, 0x7a, 0x4d, 0x24, 0xa0, 0x51, 0x94, 0xca, 0x6a,
    0xf9, 0xd6, 0x6c, 0x80, 0xc2, 0xc2, 0x88, 0x1b, 0xd3, 0x56, 0x59, 0x29, 0xd6, 0x8f, 0x36, 0x69,
    0xeb, 0x05, 0x7c, 0x43, 0xd1, 0xd6, 0x78, 0x09, 0x50, 0x4e, 0x81, 0xb4, 0x59, 0x21, 0x8b, 0x18,
    0x85, 0xcb, 0xd3, 0x65, 0x7a, 0xdb, 0x44, 0x00, 0xad, 0x98, 0xac, 0x40, 0x5b, 0xec, 0x4d, 0x6b,
    0x57, 0x2c, 0x88, 0x8d, 0xca, 0x51, 0xcb, 0x46, 0x78, 0x95, 0x12, 0x81, 0xca, 0x87, 0xca, 0x9b,
    0xac, 0xfc, 0x44, 0x09, 0x12, 0xab, 0xbc, 0x69, 0x2a, 0x9e, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define WT_BLOCK_COMPRESS_SKIP 64
#define ZSTD_PREFIX sizeof(uint64_t)

#ifdef WORDS_BIGENDIAN
/*
 * zstd_bswap64 --
 *     64-bit unsigned little-endian to/from big-endian value.
 */
static inline uint64_t
zstd_bswap64(uint64_t v)
{
    return (((v << 56) & 0xff00000000000000UL) | ((v << 40) & 0x00ff000000000000UL) |
      ((v << 24) & 0x0000ff0000000000UL) | ((v << 8) & 0x000000ff00000000UL) |
      ((v >> 8) & 0x00000000ff000000UL) | ((v >> 24) & 0x0000000000ff0000UL) |
      ((v >> 40) & 0x000000000000ff00UL) | ((v >> 56) & 0x00000000000000ffUL));
}
#endif

static void
display_bytes(const unsigned char* data, uint64_t size)
{
    const int PRINT_BYTES_PER_ROW = 16;
    uint64_t row_start, i;
    int offset;
    char buffer[1024];

    std::cout << "display_bytes() size: " << size << std::endl;

    row_start = 0;
    while (row_start < size) {
        std::cout << "row_start: [" << std::hex << row_start << "] ";
        for (i = 0; (i < PRINT_BYTES_PER_ROW) && ((row_start + i) < size); i++) {
            std::cout << "0x" << std::hex << static_cast<int>(data[row_start + i]) << " ";
        }
        std::cout << std::endl;
        row_start += PRINT_BYTES_PER_ROW;
    }
}

TEST_CASE("Compression: zstd", "[zstd, compression]")
{
    constexpr int dest_max = 1024;
    std::vector<unsigned char> compressed_data(dest_max);
    size_t result = ZSTD_compress(compressed_data.data(), compressed_data.size(),
        hello_world_bytes.data(), hello_world_bytes.size(), 3);
    REQUIRE(!ZSTD_isError(result));
    size_t compressed_size = result;

    std::vector<unsigned char> decompressed_data(dest_max);
    result = ZSTD_decompress(decompressed_data.data(), decompressed_data.size(), compressed_data.data(), compressed_size);
    REQUIRE(!ZSTD_isError(result));
    size_t decompressed_size = result;
    REQUIRE(decompressed_size == hello_world_bytes.size());
    for (size_t i = 0; i < decompressed_size; i++)
        REQUIRE(decompressed_data[i] == hello_world_bytes[i]);

}


TEST_CASE("Compression: zstd WT-13690", "[zstd, compression]")
{
    unsigned char *src = compressed_data_from_issue.data() + WT_BLOCK_COMPRESS_SKIP;

    uint64_t zstd_len = *reinterpret_cast<uint64_t *>(src);
#ifdef WORDS_BIGENDIAN
    zstd_len = zstd_bswap64(zstd_len);
#endif
    REQUIRE(zstd_len + ZSTD_PREFIX <= compressed_data_from_issue.size());

    constexpr int dest_max = 10240;
    std::vector<unsigned char> decompressed_data(dest_max);
    size_t result = ZSTD_decompress(decompressed_data.data(), decompressed_data.size(), src + ZSTD_PREFIX, zstd_len);
    REQUIRE(!ZSTD_isError(result));
    display_bytes(decompressed_data.data(), result);
    size_t decompressed_size = result;
}
