#! /usr/bin/env bash
#
# This script is used to list and dump WiredTiger data files ('WiredTiger.wt') generated by test/format program.
#
# Supported return values:
#   0: list & dump are successful for all data files
#   1: list is not successful for some data file
#   2: dump is not successful for some table object
#   3: 't' or 'wt' binary file does not exist
#   4: 'RUNDIR' directory does not exist
#   5: Command argument setting is wrong

if [ $# -gt 1 ]; then
	echo "Usage: $0 [-v]"
	exit 5
fi

[ "$1" == "-v" ] && verbose=true || verbose=false

# Switch to the Git repo toplevel directory
cd $(git rev-parse --show-toplevel)

# Walk into the test/format directory in which data files are generated
cd build_posix/test/format

# Check the existence of 'RUNDIR' directory
if [ ! -d "RUNDIR" ]; then
	echo "test/format 'RUNDIR' directory does not exist, exiting ..."
	exit 4
fi

# Check the existence of 'wt' binary
wt_binary=$(find ../../ -type f -executable -name wt | grep '.libs' | head -1)
if [ ! -x "${wt_binary}" ]; then
	echo "'wt' binary does not exist, exiting ..."
	exit 3
fi

# Check the existence of test/format 't' binary
if [ ! -x "t" ]; then
	echo "test/format 't' binary does not exist, exiting ..."
	exit 3
fi

lib_dir=$(dirname "${wt_binary}")
build_dir=$(dirname "${lib_dir}")
echo "lib_dir: ${lib_dir}, build_dir: ${build_dir}"

# Work out the list of directories that include wt data files
dirs_include_datafile=$(find ./RUNDIR -type f -name WiredTiger.wt -print0 | xargs -0 dirname)
echo "dirs_include_datafile: ${dirs_include_datafile}"

# Loop through each data file under the TEST_DIR
IFS=$'\n'
for d in ${dirs_include_datafile}
do
	echo "${d}"

	tables=$(LD_LIBRARY_PATH="${lib_dir}" ${wt_binary} -h "${d}" list)
	rc=$?

	if [ "$rc" -ne "0" ]; then 
		echo "Failed to list '${d}' directory, exiting ..."
		exit 1
	fi

	# Loop through each table object in the data file
	for t in ${tables}
	do
		echo ${t}
		dump=$(LD_LIBRARY_PATH="${lib_dir}" ${wt_binary} -h ${d} dump ${t})
		rc=$?

		if [ "$rc" -ne "0" ]; then
			echo "Failed to dump '${t}' table under '${d}' directory, exiting ..."
			exit 2
		fi

		# Print the table dump out if verbose flag is on
		[ "${verbose}" = true ] && echo ${dump}
	done
done

# If reaching here, the testing result is positive
echo -e "\nAll the data files under 'RUNDIR' directory are listed and dumped successfully!"
exit 0 
