#!/bin/bash

#
# This script generates test/packing/log_auto_fmt.h from an older src/log/log_auto.c
#

set -euo pipefail

GITHOME="$(git rev-parse --show-toplevel)"
cd "$GITHOME"

export MYNAME=`basename "$0"`

prepare_file() {
  perl -E '
    @a=<>;                                   # read all lines
    for (@a) { /^(?:#define\s+)?(__\w++)(?=\()/ and $fn{$1}=1; }  # collect locally defined functions and fn-like macros
    $FNRE = join "|", keys %fn;              # make a regex out of them
    print << "_END";
/* DO NOT EDIT: THIS FILE IS AUTOMATICALLY GENERATED BY $ENV{MYNAME} */

#ifdef WT_STRUCT_PACKING_@{[uc $ENV{SUFFIX}]}
@{[join "\n", map {"#define ${_} ${_}__$ENV{SUFFIX}"} sort keys %fn]}
#endif
_END
    for (@a) {
#        /^#include |DO NOT EDIT/ && next;    # strip includes and previous "DO NOT EDIT" notice
        s/^(int|void)/static $1/ ||          # add "static" to all function defs
        s/($FNRE)/${1}__$ENV{SUFFIX}/g;      # append suffix to all locally defined funcs
        print;
    }'
}

git show 3f576a00af:src/log/log_auto.c | SUFFIX=fmt    prepare_file > test/packing/log_auto_fmt.h
                cat src/log/log_auto.c | SUFFIX=direct prepare_file > test/packing/log_auto_direct.h


cd dist
python3 << "_END" > ../test/packing/log_auto_test.h
import os
from log import *

N = '\n'
T = '\t'

print(f'''/* DO NOT EDIT: THIS FILE IS AUTOMATICALLY GENERATED BY {os.environ['MYNAME']} */

#include "log_auto_fmt.h"
#include "log_auto_direct.h"

''')

for optype in log_data.optypes:
    print('''
static void
test_cmp__wt_logop_{optype.name}(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct{arg_decls_in}) {{
    const uint8_t *data_fmt, *data_direct;
    {local_decls}

    {local_init}

    /* test packing */
    assert(__wt_logop_{optype.name}_pack__fmt(session, logrec_fmt{pack_args_fmt}) == 0);
    assert(__wt_logop_{optype.name}_pack__direct(session, logrec_direct{pack_args_direct}) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_{optype.name}_unpack__fmt(session, &data_fmt, data_fmt+logrec_fmt->size{unpack_args_fmt}) == 0);
    assert(__wt_logop_{optype.name}_unpack__direct(session, &data_direct, data_direct+logrec_direct->size{unpack_args_direct}) == 0);

    {check_fields}
}}
'''.format(
    local_decls = (('\n'.join(
        '    const char *'+f.fieldname+'_fmt, *'+f.fieldname+'_direct;'
        if f.typename == 'string' else
        '    '+f.ctype+' '+f.fieldname+'_fmt, '+f.fieldname+'_direct;'
        for f in optype.fields))
        if optype.fields else ''),
    local_init = (('\n'.join(
        '    '+f.fieldname+'_fmt.data='+f.fieldname+'->data; '+f.fieldname+'_direct.data='+f.fieldname+'->data;'+
        '    '+f.fieldname+'_fmt.size='+f.fieldname+'->size; '+f.fieldname+'_direct.size='+f.fieldname+'->size;'
        if f.typename == 'WT_ITEM' else
        '    '+f.fieldname+'_fmt.l.file='+f.fieldname+'->l.file; '+f.fieldname+'_direct.l.file='+f.fieldname+'->l.file;'+
        '    '+f.fieldname+'_fmt.l.offset='+f.fieldname+'->l.offset; '+f.fieldname+'_direct.l.offset='+f.fieldname+'->l.offset;'
        if f.typename == 'WT_LSN' else
        '    '+f.fieldname+'_fmt='+f.fieldname+'; '+f.fieldname+'_direct='+f.fieldname+';'
        for f in optype.fields))
        if optype.fields else ''),
    arg_decls_in = ''.join(', ' + f.cindecl for f in optype.fields),
    pack_args_fmt = ''.join(', ' + ('&' if f.byptr else '') + f.fieldname + '_fmt' for f in optype.fields),
    pack_args_direct = ''.join(', ' + ('&' if f.byptr else '') + f.fieldname + '_direct' for f in optype.fields),
    unpack_args_fmt = ''.join(', &' + f.fieldname + '_fmt' for f in optype.fields),
    unpack_args_direct = ''.join(', &' + f.fieldname + '_direct' for f in optype.fields),
    check_fields = '\n'.join(
        '    assert('+f.fieldname+'_fmt.size == '+f.fieldname+'_direct.size);\n    assert(memcmp('+f.fieldname+'_fmt.data, '+f.fieldname+'_direct.data, '+f.fieldname+'_fmt.size) == 0);\n'
        if f.typename == 'WT_ITEM' else
        '    assert('+f.fieldname+'_fmt.l.file == '+f.fieldname+'_direct.l.file);\n    assert('+f.fieldname+'_fmt.l.offset == '+f.fieldname+'_direct.l.offset);\n'
        if f.typename == 'WT_LSN' else
        '    assert(!strcmp('+f.fieldname+'_fmt, '+f.fieldname+'_direct));'
        if f.typename == 'string' else
        '    assert('+f.fieldname+'_fmt == '+f.fieldname+'_direct);'
        for f in optype.fields),
    **locals()))

print(f'''

static void
test_cmp_all(WT_SESSION_IMPL *session) {{
    WT_ITEM logrec_fmt, logrec_direct;

    logrec_fmt.data = malloc(1024);
    logrec_fmt.size = 1024;
    logrec_direct.data = malloc(1024);
    logrec_direct.size = 1024;

''')

for optype in log_data.optypes:
    print('    test_cmp__wt_logop_{optype.name}(session, &logrec_fmt, &logrec_direct{arg_vals_in});'.format(
        arg_vals_in = ''.join(', 0' for f in optype.fields),
        **locals()))

print(f'''

    free(logrec_fmt.data);
    free(logrec_direct.data);
}}

''')

_END

./s_clang_format "$GITHOME/test/packing/log_auto_test.h"
