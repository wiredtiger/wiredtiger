/* DO NOT EDIT: THIS FILE IS AUTOMATICALLY GENERATED BY log_auto-test-gen.sh */

#include "log_auto_fmt.h"
#include "log_auto_direct.h"

static void
test_cmp__wt_logop_col_modify(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct,
  uint32_t fileid, uint64_t recno, WT_ITEM *value)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    uint64_t recno_fmt, recno_direct;
    WT_ITEM value_fmt, value_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    recno_fmt = recno;
    recno_direct = recno;
    value_fmt.data = value->data;
    value_direct.data = value->data;
    value_fmt.size = value->size;
    value_direct.size = value->size;

    /* test packing */
    assert(
      __wt_logop_col_modify_pack__fmt(session, logrec_fmt, fileid_fmt, recno_fmt, &value_fmt) == 0);
    assert(__wt_logop_col_modify_pack__direct(
             session, logrec_direct, fileid_direct, recno_direct, &value_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_col_modify_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &fileid_fmt, &recno_fmt, &value_fmt) == 0);
    assert(__wt_logop_col_modify_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &recno_direct, &value_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(recno_fmt == recno_direct);
    assert(value_fmt.size == value_direct.size);
    assert(memcmp(value_fmt.data, value_direct.data, value_fmt.size) == 0);
}

static void
test_cmp__wt_logop_col_put(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct,
  uint32_t fileid, uint64_t recno, WT_ITEM *value)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    uint64_t recno_fmt, recno_direct;
    WT_ITEM value_fmt, value_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    recno_fmt = recno;
    recno_direct = recno;
    value_fmt.data = value->data;
    value_direct.data = value->data;
    value_fmt.size = value->size;
    value_direct.size = value->size;

    /* test packing */
    assert(
      __wt_logop_col_put_pack__fmt(session, logrec_fmt, fileid_fmt, recno_fmt, &value_fmt) == 0);
    assert(__wt_logop_col_put_pack__direct(
             session, logrec_direct, fileid_direct, recno_direct, &value_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_col_put_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &fileid_fmt, &recno_fmt, &value_fmt) == 0);
    assert(__wt_logop_col_put_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &recno_direct, &value_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(recno_fmt == recno_direct);
    assert(value_fmt.size == value_direct.size);
    assert(memcmp(value_fmt.data, value_direct.data, value_fmt.size) == 0);
}

static void
test_cmp__wt_logop_col_remove(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct,
  uint32_t fileid, uint64_t recno)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    uint64_t recno_fmt, recno_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    recno_fmt = recno;
    recno_direct = recno;

    /* test packing */
    assert(__wt_logop_col_remove_pack__fmt(session, logrec_fmt, fileid_fmt, recno_fmt) == 0);
    assert(
      __wt_logop_col_remove_pack__direct(session, logrec_direct, fileid_direct, recno_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_col_remove_unpack__fmt(
             session, &data_fmt, data_fmt + logrec_fmt->size, &fileid_fmt, &recno_fmt) == 0);
    assert(__wt_logop_col_remove_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &recno_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(recno_fmt == recno_direct);
}

static void
test_cmp__wt_logop_col_truncate(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt,
  WT_ITEM *logrec_direct, uint32_t fileid, uint64_t start, uint64_t stop)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    uint64_t start_fmt, start_direct;
    uint64_t stop_fmt, stop_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    start_fmt = start;
    start_direct = start;
    stop_fmt = stop;
    stop_direct = stop;

    /* test packing */
    assert(
      __wt_logop_col_truncate_pack__fmt(session, logrec_fmt, fileid_fmt, start_fmt, stop_fmt) == 0);
    assert(__wt_logop_col_truncate_pack__direct(
             session, logrec_direct, fileid_direct, start_direct, stop_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_col_truncate_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &fileid_fmt, &start_fmt, &stop_fmt) == 0);
    assert(__wt_logop_col_truncate_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &start_direct, &stop_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(start_fmt == start_direct);
    assert(stop_fmt == stop_direct);
}

static void
test_cmp__wt_logop_row_modify(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct,
  uint32_t fileid, WT_ITEM *key, WT_ITEM *value)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    WT_ITEM key_fmt, key_direct;
    WT_ITEM value_fmt, value_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    key_fmt.data = key->data;
    key_direct.data = key->data;
    key_fmt.size = key->size;
    key_direct.size = key->size;
    value_fmt.data = value->data;
    value_direct.data = value->data;
    value_fmt.size = value->size;
    value_direct.size = value->size;

    /* test packing */
    assert(
      __wt_logop_row_modify_pack__fmt(session, logrec_fmt, fileid_fmt, &key_fmt, &value_fmt) == 0);
    assert(__wt_logop_row_modify_pack__direct(
             session, logrec_direct, fileid_direct, &key_direct, &value_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_row_modify_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &fileid_fmt, &key_fmt, &value_fmt) == 0);
    assert(__wt_logop_row_modify_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &key_direct, &value_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(key_fmt.size == key_direct.size);
    assert(memcmp(key_fmt.data, key_direct.data, key_fmt.size) == 0);

    assert(value_fmt.size == value_direct.size);
    assert(memcmp(value_fmt.data, value_direct.data, value_fmt.size) == 0);
}

static void
test_cmp__wt_logop_row_put(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct,
  uint32_t fileid, WT_ITEM *key, WT_ITEM *value)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    WT_ITEM key_fmt, key_direct;
    WT_ITEM value_fmt, value_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    key_fmt.data = key->data;
    key_direct.data = key->data;
    key_fmt.size = key->size;
    key_direct.size = key->size;
    value_fmt.data = value->data;
    value_direct.data = value->data;
    value_fmt.size = value->size;
    value_direct.size = value->size;

    /* test packing */
    assert(
      __wt_logop_row_put_pack__fmt(session, logrec_fmt, fileid_fmt, &key_fmt, &value_fmt) == 0);
    assert(__wt_logop_row_put_pack__direct(
             session, logrec_direct, fileid_direct, &key_direct, &value_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_row_put_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &fileid_fmt, &key_fmt, &value_fmt) == 0);
    assert(__wt_logop_row_put_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &key_direct, &value_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(key_fmt.size == key_direct.size);
    assert(memcmp(key_fmt.data, key_direct.data, key_fmt.size) == 0);

    assert(value_fmt.size == value_direct.size);
    assert(memcmp(value_fmt.data, value_direct.data, value_fmt.size) == 0);
}

static void
test_cmp__wt_logop_row_remove(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct,
  uint32_t fileid, WT_ITEM *key)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    WT_ITEM key_fmt, key_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    key_fmt.data = key->data;
    key_direct.data = key->data;
    key_fmt.size = key->size;
    key_direct.size = key->size;

    /* test packing */
    assert(__wt_logop_row_remove_pack__fmt(session, logrec_fmt, fileid_fmt, &key_fmt) == 0);
    assert(
      __wt_logop_row_remove_pack__direct(session, logrec_direct, fileid_direct, &key_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_row_remove_unpack__fmt(
             session, &data_fmt, data_fmt + logrec_fmt->size, &fileid_fmt, &key_fmt) == 0);
    assert(__wt_logop_row_remove_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &key_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(key_fmt.size == key_direct.size);
    assert(memcmp(key_fmt.data, key_direct.data, key_fmt.size) == 0);
}

static void
test_cmp__wt_logop_row_truncate(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt,
  WT_ITEM *logrec_direct, uint32_t fileid, WT_ITEM *start, WT_ITEM *stop, uint32_t mode)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t fileid_fmt, fileid_direct;
    WT_ITEM start_fmt, start_direct;
    WT_ITEM stop_fmt, stop_direct;
    uint32_t mode_fmt, mode_direct;

    fileid_fmt = fileid;
    fileid_direct = fileid;
    start_fmt.data = start->data;
    start_direct.data = start->data;
    start_fmt.size = start->size;
    start_direct.size = start->size;
    stop_fmt.data = stop->data;
    stop_direct.data = stop->data;
    stop_fmt.size = stop->size;
    stop_direct.size = stop->size;
    mode_fmt = mode;
    mode_direct = mode;

    /* test packing */
    assert(__wt_logop_row_truncate_pack__fmt(
             session, logrec_fmt, fileid_fmt, &start_fmt, &stop_fmt, mode_fmt) == 0);
    assert(__wt_logop_row_truncate_pack__direct(
             session, logrec_direct, fileid_direct, &start_direct, &stop_direct, mode_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_row_truncate_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &fileid_fmt, &start_fmt, &stop_fmt, &mode_fmt) == 0);
    assert(__wt_logop_row_truncate_unpack__direct(session, &data_direct,
             data_direct + logrec_direct->size, &fileid_direct, &start_direct, &stop_direct,
             &mode_direct) == 0);

    assert(fileid_fmt == fileid_direct);
    assert(start_fmt.size == start_direct.size);
    assert(memcmp(start_fmt.data, start_direct.data, start_fmt.size) == 0);

    assert(stop_fmt.size == stop_direct.size);
    assert(memcmp(stop_fmt.data, stop_direct.data, stop_fmt.size) == 0);

    assert(mode_fmt == mode_direct);
}

static void
test_cmp__wt_logop_checkpoint_start(
  WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct)
{
    const uint8_t *data_fmt, *data_direct;

    /* test packing */
    assert(__wt_logop_checkpoint_start_pack__fmt(session, logrec_fmt) == 0);
    assert(__wt_logop_checkpoint_start_pack__direct(session, logrec_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_checkpoint_start_unpack__fmt(
             session, &data_fmt, data_fmt + logrec_fmt->size) == 0);
    assert(__wt_logop_checkpoint_start_unpack__direct(
             session, &data_direct, data_direct + logrec_direct->size) == 0);
}

static void
test_cmp__wt_logop_prev_lsn(
  WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct, WT_LSN *prev_lsn)
{
    const uint8_t *data_fmt, *data_direct;
    WT_LSN prev_lsn_fmt, prev_lsn_direct;

    prev_lsn_fmt.l.file = prev_lsn->l.file;
    prev_lsn_direct.l.file = prev_lsn->l.file;
    prev_lsn_fmt.l.offset = prev_lsn->l.offset;
    prev_lsn_direct.l.offset = prev_lsn->l.offset;

    /* test packing */
    assert(__wt_logop_prev_lsn_pack__fmt(session, logrec_fmt, &prev_lsn_fmt) == 0);
    assert(__wt_logop_prev_lsn_pack__direct(session, logrec_direct, &prev_lsn_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_prev_lsn_unpack__fmt(
             session, &data_fmt, data_fmt + logrec_fmt->size, &prev_lsn_fmt) == 0);
    assert(__wt_logop_prev_lsn_unpack__direct(
             session, &data_direct, data_direct + logrec_direct->size, &prev_lsn_direct) == 0);

    assert(prev_lsn_fmt.l.file == prev_lsn_direct.l.file);
    assert(prev_lsn_fmt.l.offset == prev_lsn_direct.l.offset);
}

static void
test_cmp__wt_logop_backup_id(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt, WT_ITEM *logrec_direct,
  uint32_t index, uint64_t granularity, const char *id)
{
    const uint8_t *data_fmt, *data_direct;
    uint32_t index_fmt, index_direct;
    uint64_t granularity_fmt, granularity_direct;
    const char *id_fmt, *id_direct;

    index_fmt = index;
    index_direct = index;
    granularity_fmt = granularity;
    granularity_direct = granularity;
    id_fmt = id;
    id_direct = id;

    /* test packing */
    assert(
      __wt_logop_backup_id_pack__fmt(session, logrec_fmt, index_fmt, granularity_fmt, id_fmt) == 0);
    assert(__wt_logop_backup_id_pack__direct(
             session, logrec_direct, index_direct, granularity_direct, id_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_backup_id_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &index_fmt, &granularity_fmt, &id_fmt) == 0);
    assert(
      __wt_logop_backup_id_unpack__direct(session, &data_direct, data_direct + logrec_direct->size,
        &index_direct, &granularity_direct, &id_direct) == 0);

    assert(index_fmt == index_direct);
    assert(granularity_fmt == granularity_direct);
    assert(!strcmp(id_fmt, id_direct));
}

static void
test_cmp__wt_logop_txn_timestamp(WT_SESSION_IMPL *session, WT_ITEM *logrec_fmt,
  WT_ITEM *logrec_direct, uint64_t time_sec, uint64_t time_nsec, uint64_t commit_ts,
  uint64_t durable_ts, uint64_t first_commit_ts, uint64_t prepare_ts, uint64_t read_ts)
{
    const uint8_t *data_fmt, *data_direct;
    uint64_t time_sec_fmt, time_sec_direct;
    uint64_t time_nsec_fmt, time_nsec_direct;
    uint64_t commit_ts_fmt, commit_ts_direct;
    uint64_t durable_ts_fmt, durable_ts_direct;
    uint64_t first_commit_ts_fmt, first_commit_ts_direct;
    uint64_t prepare_ts_fmt, prepare_ts_direct;
    uint64_t read_ts_fmt, read_ts_direct;

    time_sec_fmt = time_sec;
    time_sec_direct = time_sec;
    time_nsec_fmt = time_nsec;
    time_nsec_direct = time_nsec;
    commit_ts_fmt = commit_ts;
    commit_ts_direct = commit_ts;
    durable_ts_fmt = durable_ts;
    durable_ts_direct = durable_ts;
    first_commit_ts_fmt = first_commit_ts;
    first_commit_ts_direct = first_commit_ts;
    prepare_ts_fmt = prepare_ts;
    prepare_ts_direct = prepare_ts;
    read_ts_fmt = read_ts;
    read_ts_direct = read_ts;

    /* test packing */
    assert(__wt_logop_txn_timestamp_pack__fmt(session, logrec_fmt, time_sec_fmt, time_nsec_fmt,
             commit_ts_fmt, durable_ts_fmt, first_commit_ts_fmt, prepare_ts_fmt, read_ts_fmt) == 0);
    assert(__wt_logop_txn_timestamp_pack__direct(session, logrec_direct, time_sec_direct,
             time_nsec_direct, commit_ts_direct, durable_ts_direct, first_commit_ts_direct,
             prepare_ts_direct, read_ts_direct) == 0);

    assert(logrec_fmt->size == logrec_fmt->size);
    assert(memcmp(logrec_fmt->data, logrec_fmt->data, logrec_fmt->size) == 0);

    /* test unpacking */
    data_fmt = logrec_fmt->data;
    data_direct = logrec_direct->data;
    assert(__wt_logop_txn_timestamp_unpack__fmt(session, &data_fmt, data_fmt + logrec_fmt->size,
             &time_sec_fmt, &time_nsec_fmt, &commit_ts_fmt, &durable_ts_fmt, &first_commit_ts_fmt,
             &prepare_ts_fmt, &read_ts_fmt) == 0);
    assert(
      __wt_logop_txn_timestamp_unpack__direct(session, &data_direct,
        data_direct + logrec_direct->size, &time_sec_direct, &time_nsec_direct, &commit_ts_direct,
        &durable_ts_direct, &first_commit_ts_direct, &prepare_ts_direct, &read_ts_direct) == 0);

    assert(time_sec_fmt == time_sec_direct);
    assert(time_nsec_fmt == time_nsec_direct);
    assert(commit_ts_fmt == commit_ts_direct);
    assert(durable_ts_fmt == durable_ts_direct);
    assert(first_commit_ts_fmt == first_commit_ts_direct);
    assert(prepare_ts_fmt == prepare_ts_direct);
    assert(read_ts_fmt == read_ts_direct);
}

static void
test_cmp_all(WT_SESSION_IMPL *session)
{
    WT_ITEM logrec_fmt, logrec_direct;

    logrec_fmt.data = malloc(1024);
    logrec_fmt.size = 1024;
    logrec_direct.data = malloc(1024);
    logrec_direct.size = 1024;

    test_cmp__wt_logop_col_modify(session, &logrec_fmt, &logrec_direct, 0, 0, 0);
    test_cmp__wt_logop_col_put(session, &logrec_fmt, &logrec_direct, 0, 0, 0);
    test_cmp__wt_logop_col_remove(session, &logrec_fmt, &logrec_direct, 0, 0);
    test_cmp__wt_logop_col_truncate(session, &logrec_fmt, &logrec_direct, 0, 0, 0);
    test_cmp__wt_logop_row_modify(session, &logrec_fmt, &logrec_direct, 0, 0, 0);
    test_cmp__wt_logop_row_put(session, &logrec_fmt, &logrec_direct, 0, 0, 0);
    test_cmp__wt_logop_row_remove(session, &logrec_fmt, &logrec_direct, 0, 0);
    test_cmp__wt_logop_row_truncate(session, &logrec_fmt, &logrec_direct, 0, 0, 0, 0);
    test_cmp__wt_logop_checkpoint_start(session, &logrec_fmt, &logrec_direct);
    test_cmp__wt_logop_prev_lsn(session, &logrec_fmt, &logrec_direct, 0);
    test_cmp__wt_logop_backup_id(session, &logrec_fmt, &logrec_direct, 0, 0, 0);
    test_cmp__wt_logop_txn_timestamp(session, &logrec_fmt, &logrec_direct, 0, 0, 0, 0, 0, 0, 0);

    free(logrec_fmt.data);
    free(logrec_direct.data);
}
