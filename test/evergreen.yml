#
# This file defines the tasks and platforms for WiredTiger in the
# MongoDB continuous integration system (see https://mci.mongodb.com).
#

functions:
  "get project" :
    command: git.get_project
    params:
      directory: wiredtiger
  "fetch artifacts" :
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: wiredtiger/${build_variant}/${revision}/artifacts/${dependent_task|compile}_${build_id}.tgz
        bucket: build_external
        extract_to: wiredtiger
  "fetch artifacts from little-endian" :
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: wiredtiger/little-endian/${revision}/artifacts/WT_TEST.tgz
        bucket: build_external
        local_file: WT_TEST-little-endian.tgz
    - command: archive.targz_extract
      params:
        path: "WT_TEST-little-endian.tgz"
        destination: "wiredtiger/build_posix/test/format"
  "fetch artifacts from big-endian" :
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: wiredtiger/big-endian/${revision}/artifacts/WT_TEST.tgz
        bucket: build_external
        local_file: WT_TEST-big-endian.tgz
    - command: archive.targz_extract
      params:
        path: "WT_TEST-big-endian.tgz"
        destination: "wiredtiger/build_posix/test/format"
  "fetch mongo-tests repo" :
    command: shell.exec
    params:
      script: |
        git clone https://github.com/wiredtiger/mongo-tests
  "compile wiredtiger":
    command: shell.exec
    params:
      working_dir: "wiredtiger"
      shell: bash
      script: |
        set -o errexit
        set -o verbose
        if [ "Windows_NT" = "$OS" ]; then
          pip install scons==3.1.1
          scons-3.1.1.bat ${win_configure_flags|--enable-python=c:\\swigwin-3.0.2\\swig.exe --enable-diagnostic} ${smp_command|}
        else
          cd build_posix
          sh ./reconf
          ${configure_env_vars|CC=/opt/mongodbtoolchain/v3/bin/gcc CXX=/opt/mongodbtoolchain/v3/bin/g++ PATH=/opt/mongodbtoolchain/v3/bin:$PATH CFLAGS="-ggdb"} \
            ../configure ${configure_python_setting|} \
            ${posix_configure_flags|--enable-silent-rules --enable-diagnostic --enable-python --enable-zlib --enable-strict --enable-static --prefix=$(pwd)/LOCAL_INSTALL}
          ${make_command|make} ${smp_command|} 2>&1

          # On macOS, change the binary location with install_name_tool since DYLD_LIBRARY_PATH
          # appears not to work for dynamic modules loaded by python. For wt, the libtool generated
          # script has the wrong path for running on test machines.
          if [ "$(uname -s)" == "Darwin" ]; then
            WT_VERSION=$(m4 aclocal/version.m4)
            install_name_tool -change /usr/local/lib/libwiredtiger-$WT_VERSION.dylib $(pwd)/.libs/libwiredtiger-$WT_VERSION.dylib lang/python/_wiredtiger*.so
            install_name_tool -change /usr/local/lib/libwiredtiger-$WT_VERSION.dylib $(pwd)/.libs/libwiredtiger-$WT_VERSION.dylib .libs/wt
          fi
        fi
  "make check directory":
    command: shell.exec
    params:
      working_dir: "wiredtiger/build_posix"
      script: |
        set -o errexit
        set -o verbose

        ${test_env_vars|} ${make_command|make} VERBOSE=1 check -C ${directory}  ${smp_command|} 2>&1
  "upload artifact":
    - command: archive.targz_pack
      params:
        target: "wiredtiger.tgz"
        source_dir: "wiredtiger"
        include:
          - "./**"
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        local_file: wiredtiger.tgz
        bucket: build_external
        permissions: public-read
        content_type: application/tar
        display_name: Artifacts
        remote_file: wiredtiger/${build_variant}/${revision}/artifacts/${task_name}_${build_id}.tgz
  "cleanup":
    command: shell.exec
    params:
      script: |
        rm -rf "wiredtiger"
        rm -rf "wiredtiger.tgz"

pre:
  - func: "cleanup"
post:
  - func: "upload artifact"
  - func: "cleanup"

tasks:
## Base compile task on posix flavours
  - name: compile
    tags: ["pull_request"]
    commands:
      - func: "get project"
      - func: "compile wiredtiger"

  - name: compile-asan
    tags: ["pull_request"]
    commands:
      - func: "get project"
      - func: "compile wiredtiger"
        vars:
          configure_env_vars: CC=/opt/mongodbtoolchain/v3/bin/clang CXX=/opt/mongodbtoolchain/v3/bin/clang++ ASAN_OPTIONS=detect_leaks=1:abort_on_error=1:disable_coredump=0 ASAN_SYMBOLIZER_PATH=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer CFLAGS="-fsanitize=address -ggdb"
          posix_configure_flags: --enable-silent-rules --enable-strict --enable-diagnostic --disable-static

  - name: make-check-test
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${make_command|make} VERBOSE=1 check ${smp_command|} 2>&1

  # Start of normal make check test tasks

  - name: lang-python-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: lang/python

  - name: examples-c-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: examples/c

  - name: examples-c-asan-test
    tags: ["pull_request"]
    depends_on:
      - name: compile-asan
    commands:
      - func: "fetch artifacts"
        vars:
          dependent_task: compile-asan
      - func: "compile wiredtiger"
        vars:
          configure_env_vars: CC=/opt/mongodbtoolchain/v3/bin/clang CXX=/opt/mongodbtoolchain/v3/bin/clang++ ASAN_OPTIONS=detect_leaks=1:abort_on_error=1:disable_coredump=0 ASAN_SYMBOLIZER_PATH=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer CFLAGS="-fsanitize=address -ggdb"
          posix_configure_flags: --enable-silent-rules --enable-strict --enable-diagnostic --disable-static
      - func: "make check directory"
        vars:
          directory: examples/c

  - name: bloom-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/bloom

  - name: checkpoint-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/checkpoint

  - name: cursor-order-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/cursor_order

  - name: fops-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/fops

  - name: format-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/format

  - name: huge-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/huge

  - name: manydbs-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/manydbs

  - name: packing-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/packing

  - name: readonly-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/readonly

  - name: salvage-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/salvage

  - name: thread-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: test/thread

  - name: bench-wtperf-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - func: "make check directory"
        vars:
          directory: bench/wtperf

  # End of normal make check test tasks

  # Start of csuite test tasks

  - name: csuite-import-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/../test/csuite/import/smoke.sh 2>&1

  - name: csuite-random-abort-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/../test/csuite/random_abort/smoke.sh 2>&1

  - name: csuite-random-directio-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/../test/csuite/random_directio/smoke.sh 2>&1

  - name: csuite-schema-abort-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/../test/csuite/schema_abort/smoke.sh 2>&1

  - name: csuite-timestamp-abort-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/../test/csuite/timestamp_abort/smoke.sh 2>&1

  - name: csuite-scope-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_scope 2>&1

  - name: csuite-truncated-log-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_truncated_log 2>&1

  - name: csuite-wt1965-col-efficiency-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt1965_col_efficiency 2>&1

  - name: csuite-wt2403-lsm-workload-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2403_lsm_workload 2>&1

  - name: csuite-wt2447-join-main-table-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2447_join_main_table 2>&1

  - name: csuite-wt2695-checksum-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2695_checksum 2>&1

  - name: csuite-wt2592-join-schema-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2592_join_schema 2>&1

  - name: csuite-wt2719-reconfig-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2719_reconfig 2>&1

  - name: csuite-wt2999-join-extractor-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2999_join_extractor 2>&1

  - name: csuite-wt3120-filesys-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt3120_filesys 2>&1

  - name: csuite-wt3135-search-near-collator-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt3135_search_near_collator 2>&1

  - name: csuite-wt3184-dup-index-collator-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt3184_dup_index_collator 2>&1

  - name: csuite-wt3363-checkpoint-op-races-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt3363_checkpoint_op_races 2>&1

  - name: csuite-wt3874-pad-byte-collator-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt3874_pad_byte_collator 2>&1

  - name: csuite-wt4105-large-doc-small-upd-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt4105_large_doc_small_upd 2>&1

  - name: csuite-wt4117-checksum-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt4117_checksum 2>&1

  - name: csuite-wt4156-metadata-salvage-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt4156_metadata_salvage 2>&1

  - name: csuite-wt4699-json-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt4699_json 2>&1

  - name: csuite-wt4803-cache-overflow-abort-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt4803_cache_overflow_abort 2>&1

  - name: csuite-wt4891-meta-ckptlist-get-alloc-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt4891_meta_ckptlist_get_alloc 2>&1

  - name: csuite-rwlock-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_rwlock 2>&1

  - name: csuite-wt2246-col-append-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2246_col_append 2>&1

  - name: csuite-wt2323-join-visibility-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2323_join_visibility 2>&1

  - name: csuite-wt2535-insert-race-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2535_insert_race 2>&1

  - name: csuite-wt2834-join-bloom-fix-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2834_join_bloom_fix 2>&1

  - name: csuite-wt2853-perf-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2853_perf 2>&1

  - name: csuite-wt2909-checkpoint-integrity-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt2909_checkpoint_integrity 2>&1

  - name: csuite-wt3338-partial-update-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt3338_partial_update 2>&1

  - name: csuite-wt4333-handle-locks-test
    tags: ["pull_request"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} $(pwd)/test/csuite/test_wt4333_handle_locks 2>&1

  # End of csuite test tasks

  # Start of Python unit test tasks

  - name: unit-test
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            # Only Windows and OS X variants are expected to run this task
            #
            # Avoid /usr/bin/python, at least on macOS: with System Integrity
            # Protection enabled, it ignores DYLD_LIBRARY_PATH and hence
            # doesn't find the WiredTiger library in the local tree.
            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py -v 2 ${smp_command|} 2>&1

  # Break out Python unit tests into multiple buckets/tasks based on test name and runtime
  # The test/suite/run.py script can work out test names by casting each command argument
  # with "test_" prefix and "*.py" postfix.
  #
  # One example:
  # "test/suite/run.py [ab]" will be translated to testing "test_a*.py" and "test_b*.py"

  - name: unit-test-bucket00
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [ab] -v 2 ${smp_command|} 2>&1

  - name: unit-test-bucket01
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [c] -v 2 ${smp_command|} 2>&1

  - name: unit-test-bucket02
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [defg] -v 2 ${smp_command|} 2>&1

  - name: unit-test-bucket03
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [hijk] -v 2 ${smp_command|} 2>&1

  - name: unit-test-bucket04
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [lmnopq] -v 2 ${smp_command|} 2>&1

  - name: unit-test-bucket05
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [rs] -v 2 ${smp_command|} 2>&1

  - name: unit-test-bucket06
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [t] -v 2 ${smp_command|} 2>&1

  - name: unit-test-bucket07
    tags: ["pull_request", "unit_test"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix"
          script: |
            set -o errexit
            set -o verbose

            ${test_env_vars|} ${python_binary|python} ../test/suite/run.py [uvwxyz] -v 2 ${smp_command|} 2>&1

  # End of Python unit test tasks

  - name: s-all
    tags: ["pull_request"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/dist"
          script: |
            set -o errexit
            set -o verbose
            sh s_all -A -E 2>&1

  - name: conf-dump-test
    tags: ["pull_request"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix/test"
          script: |
            set -o errexit
            set -o verbose
            
            ${test_env_vars|} ${python_binary|python} ../../test/wtperf/test_conf_dump.py 2>&1

  - name: compile-windows-alt
    tags: ["pull_request", "windows_only"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose

            pip install scons==3.1.1
            scons-3.1.1.bat ${smp_command|} "CFLAGS=/Gv /wd4090 /wd4996 /we4047 /we4024 /TC /we4100 /we4133" wiredtiger.dll libwiredtiger.lib

  - name: scons-check
    tags: ["pull_request", "windows_only"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose

            pip install scons==3.1.1
            scons-3.1.1.bat ${smp_command|} check

  - name: fops
    tags: ["pull_request"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            if [ "Windows_NT" = "$OS" ]; then
              cmd.exe /c t_fops.exe
            else
              build_posix/test/fops/t
            fi

  - name: format
    tags: ["windows_only"]
    depends_on:
    - name: compile
    commands:
      - func: "fetch artifacts"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            # format assumes we run it from the format directory
            cmd.exe /c "cd test\\format && ..\\..\\t_format.exe reverse=0 encryption=none logging_compression=none runs=20"

  - name: million-collection-test
    commands:
      - func: "get project"
      - func: "fetch mongo-tests repo"
      - command: shell.exec
        params:
          working_dir: mongo-tests
          script: |
            sudo su
            set -o errexit
            set -o verbose
            ulimit -n 1000000
            ulimit -c unlimited
            largescale/run-million-collection-test.sh .

  - name: compatibility-test-for-mongodb-releases
    commands:
      - func: "get project"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            test/evergreen/compatibility_test_for_mongodb_releases.sh

  - name: generate-datafile-little-endian
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix/test/format"
          script: |
            set -o errexit
            set -o verbose
            for i in $(seq 10)
            do
              ./t -1 -h "WT_TEST.$i" -c $(pwd)/../../../test/format/CONFIG.endian
            done
            # Archive the WT_TEST directories which include the generated wt data files
            tar -zcvf WT_TEST.tgz WT_TEST*
          shell: bash
      - command: s3.put
        params:
          aws_secret: ${aws_secret}
          aws_key: ${aws_key}
          local_file: wiredtiger/build_posix/test/format/WT_TEST.tgz
          bucket: build_external
          permissions: public-read
          content_type: application/tar
          display_name: WT_TEST
          remote_file: wiredtiger/little-endian/${revision}/artifacts/WT_TEST.tgz

  - name: verify-datafile-little-endian
    depends_on:
    - name: compile
    - name: generate-datafile-little-endian
    commands:
      - func: "fetch artifacts"
      - func: "fetch artifacts from little-endian"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            ./test/evergreen/verify_wt_datafiles.sh 2>&1

  - name: verify-datafile-from-little-endian
    depends_on:
    - name: compile
    - name: generate-datafile-little-endian
      variant: little-endian
    commands:
      - func: "fetch artifacts"
      - func: "fetch artifacts from little-endian"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            ./test/evergreen/verify_wt_datafiles.sh 2>&1

  - name: generate-datafile-big-endian
    depends_on:
      - name: compile
    commands:
      - func: "fetch artifacts"
      - func: "compile wiredtiger"
      - command: shell.exec
        params:
          working_dir: "wiredtiger/build_posix/test/format"
          script: |
            set -o errexit
            set -o verbose
            for i in $(seq 10)
            do
              ./t -1 -h "WT_TEST.$i" -c $(pwd)/../../../test/format/CONFIG.endian
            done
            # Archive the WT_TEST directories which include the generated wt data files
            tar -zcvf WT_TEST.tgz WT_TEST*
          shell: bash
      - command: s3.put
        params:
          aws_secret: ${aws_secret}
          aws_key: ${aws_key}
          local_file: wiredtiger/build_posix/test/format/WT_TEST.tgz
          bucket: build_external
          permissions: public-read
          content_type: application/tar
          display_name: WT_TEST
          remote_file: wiredtiger/big-endian/${revision}/artifacts/WT_TEST.tgz

  - name: verify-datafile-big-endian
    depends_on:
    - name: compile
    - name: generate-datafile-big-endian
    commands:
      - func: "fetch artifacts"
      - func: "fetch artifacts from big-endian"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            ./test/evergreen/verify_wt_datafiles.sh 2>&1

  - name: verify-datafile-from-big-endian
    depends_on:
    - name: compile
    - name: generate-datafile-big-endian
      variant: big-endian
    commands:
      - func: "fetch artifacts"
      - func: "fetch artifacts from big-endian"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            ./test/evergreen/verify_wt_datafiles.sh 2>&1

  - name: clang-analyzer
    tags: ["pull_request"]
    commands:
      - func: "get project"
      - command: shell.exec
        params:
          working_dir: "wiredtiger"
          script: |
            set -o errexit
            set -o verbose
            sh dist/s_clang-scan 2>&1

buildvariants:
- name: ubuntu1804
  display_name: Ubuntu 18.04
  run_on:
  - ubuntu1804-test
  expansions:
    test_env_vars: PATH=/opt/mongodbtoolchain/v3/bin:$PATH LD_LIBRARY_PATH=$(pwd)/.libs top_srcdir=$(pwd)/.. top_builddir=$(pwd)
    smp_command: -j $(grep -c ^processor /proc/cpuinfo)
    posix_configure_flags: --enable-silent-rules --enable-diagnostic --enable-python --enable-zlib --enable-snappy --enable-strict --enable-static --prefix=$(pwd)/LOCAL_INSTALL
    make_command: PATH=/opt/mongodbtoolchain/v3/bin:$PATH make
  tasks:
    - name: ".pull_request !.windows_only"

- name: ubuntu1804-python3
  display_name: Ubuntu 18.04 (Python3)
  run_on:
  - ubuntu1804-test
  expansions:
    test_env_vars: PATH=/opt/mongodbtoolchain/v3/bin:$PATH LD_LIBRARY_PATH=$(pwd)/.libs top_srcdir=$(pwd)/.. top_builddir=$(pwd)
    smp_command: -j $(grep -c ^processor /proc/cpuinfo)
    configure_python_setting: PYTHON=python3
    posix_configure_flags: --enable-silent-rules --enable-diagnostic --enable-python --enable-zlib --enable-snappy --enable-strict --enable-static --prefix=$(pwd)/LOCAL_INSTALL
    make_command: PATH=/opt/mongodbtoolchain/v3/bin:$PATH make
    python_binary: python3
  tasks:
    - name: compile
    - name: ".unit_test"
    - name: conf-dump-test

- name: rhel80
  display_name: RHEL 8.0
  run_on:
  - rhel80-test
  expansions:
    test_env_vars: PATH=/opt/mongodbtoolchain/v3/bin:$PATH LD_LIBRARY_PATH=$(pwd)/.libs top_srcdir=$(pwd)/.. top_builddir=$(pwd)
    smp_command: -j $(grep -c ^processor /proc/cpuinfo)
    make_command: PATH=/opt/mongodbtoolchain/v3/bin:$PATH make
  tasks:
    - name: compile
    - name: make-check-test
    - name: unit-test
    - name: fops

- name: large-scale-test
  display_name: Large scale testing
  batchtime: 1440 # 1 day
  run_on:
  - rhel80-build
  tasks:
    - name: million-collection-test

- name: compatibility-tests
  display_name: Compatibility tests
  batchtime: 10080 # 7 days
  run_on:
  - ubuntu1804-test
  tasks:
    - name: compatibility-test-for-mongodb-releases

- name: windows-64
  display_name: Windows 64-bit
  run_on:
  - windows-64-vs2017-test
  tasks:
    - name: compile
    - name: ".windows_only"
    - name: ".unit_test"
    - name: fops

- name: macos-1012
  display_name: OS X 10.12
  run_on:
  - macos-1012
  expansions:
    smp_command: -j $(sysctl -n hw.logicalcpu)
    configure_env_vars: PATH=/opt/mongodbtoolchain/v3/bin:$PATH CFLAGS="-ggdb"
    make_command: PATH=/opt/mongodbtoolchain/v3/bin:$PATH ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future make
    test_env_vars: PATH=/opt/mongodbtoolchain/v3/bin:$PATH DYLD_LIBRARY_PATH=$(pwd)/.libs top_srcdir=$(pwd)/.. top_builddir=$(pwd)
  tasks:
    - name: compile
    - name: make-check-test
    - name: unit-test
    - name: fops

- name: little-endian
  display_name: Little-endian (x86)
  run_on:
  - ubuntu1804-test
  batchtime: 10080 # 7 days
  expansions:
    smp_command: -j $(grep -c ^processor /proc/cpuinfo)
    test_env_vars: PATH=/opt/mongodbtoolchain/v3/bin:$PATH LD_LIBRARY_PATH=$(pwd)/.libs top_srcdir=$(pwd)/.. top_builddir=$(pwd)
  tasks:
  - name: compile
  - name: generate-datafile-little-endian
  - name: verify-datafile-little-endian
  - name: verify-datafile-from-big-endian

- name: big-endian
  display_name: Big-endian (s390x/zSeries)
  modules:
  - enterprise
  run_on:
  - ubuntu1804-zseries-build
  batchtime: 10080 # 7 days
  expansions:
    smp_command: -j $(grep -c ^processor /proc/cpuinfo)
    test_env_vars: PATH=/opt/mongodbtoolchain/v3/bin:$PATH LD_LIBRARY_PATH=$(pwd)/.lib top_srcdir=$(pwd)/.. top_builddir=$(pwd)
  tasks:
  - name: compile
  - name: generate-datafile-big-endian
  - name: verify-datafile-big-endian
  - name: verify-datafile-from-little-endian
