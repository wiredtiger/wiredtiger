#! /bin/sh

# General style correction and cleanup.
t=__wt.$$
trap 'rm -f $t; exit 0' 0 1 2 3 13 15

cd .. &&
for f in `find examples ext src test -name '*.[chisy]' -o -name '*.in' |
    sed '/Makefile.in/d'`; do
	if grep "^[^}]*while (0);" $f > $t; then
		echo "$f: while (0) has trailing semi-colon"
		cat $t
	fi
	if egrep '%l[diouxXn]|%[diouxXn]l' $f > $t; then
		echo "$f: incorrect or dangerous printf format: %l[diouxXn]"
		cat $t
	fi
	if grep "(unsigned)" $f > $t; then
		echo "$f: (unsigned) cast is wrong"
		cat $t
	fi
	egrep 'u_quad' $f | sed '/@u_quad_decl@/d' > $t
	test -s $t && {
		echo "$f: old-style type declaration: u_XXX_t or u_quad"
		cat $t
	}

	# Early exits from critical loops
	sed -n -e '/API_CALL/,/API_END/{=;p;}' \
	       -e '/va_start/,/va_end/{=;p;}' $f | \
		sed 'N;s/\n/:/' | \
		egrep 'return|WT_RET' | \
		sed -e "s,^,$f:," -e 's/$/ [return skips API_END call]/'

	# Bad code we can't easily fix
	grep -Hn 'bzero|exit[ ]*\(1\)|^[	 ]+[|&=+-]' $f

	tr -cd '[:alnum:][:space:][:punct:]' < $f |
	unexpand |
	sed -e 's/){/) {/' \
	    -e 's/\([	 ]\)exit (/\1exit(/g' \
	    -e 's/\([	 ]\)for(/\1for (/' \
	    -e 's/\([	 ]\)if(/\1if (/' \
	    -e 's/\([	 ]\)index(/\1strchr(/' \
	    -e 's/\([	 ]\)return(/\1return (/' \
	    -e 's/^\([	 ]+\)return \([^()]*\);/\1return (\2);/' \
	    -e 's/\([	 ]\)rindex(/\1strrchr(/' \
	    -e 's/\([	 ]\)sizeof (/\1sizeof(/g' \
	    -e 's/\([	 ]\)switch(/\1switch (/' \
	    -e 's/\([	 ]\)while(/\1while (/' \
	    -e 's/\([	 ,]\)uint\([	 ,]\)/\1u_int\2/g' \
	    -e 's/\([	 ,]\)u_int8_t\([	 ,]\)/\1uint8_t\2/g' \
	    -e 's/\([	 ,]\)u_int16_t\([	 ,]\)/\1uint16_t\2/g' \
	    -e 's/\([	 ,]\)u_int32_t\([	 ,]\)/\1uint32_t\2/g' \
	    -e 's/\([	 ,]\)u_int64_t\([	 ,]\)/\1uint64_t\2/g' \
	    -e 's/\([|&=+-]\)  *\([^*]\)/\1 \2/' \
	    -e 's/(void) /(void)/' \
	    -e '/for /!s/;;$/;/' \
	    -e 's/(unsigned)/(u_int)/' \
	    -e 's/^#define /#define	/' \
	    -e 's/sizeof(WT_PAGE_DISK)/WT_PAGE_DISK_SIZE/g' >$t

	cmp $t $f > /dev/null 2>&1 || (echo "modifying $f" && cp $t $f)
done
