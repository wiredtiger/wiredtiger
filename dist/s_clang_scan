#!/bin/bash

t_out=__wt.$$.out
t_out_filtered=__wt.$$.out_filtered
t_build=__s_clang_scan_tmp_build
trap 'rm -rf $a $b $t_out $t_build' 0 1 2 3 13 15

# Find the top-level WiredTiger directory and move to there.
top=$(git rev-parse --show-toplevel)
cd $top || exit 1
echo "$0: running scan-build in $PWD"
echo "$0: compiler: $(which clang)"
echo "$0: scan-build: $(which scan-build)"

# Check if Clang is available with the desired version.
desired_version="12.0.1"
if ! command -v clang &> /dev/null; then
    echo "clang is not available" && exit 1
elif ! clang --version | grep -q $desired_version; then
    echo "clang is not using the expected version: $desired_version"
    clang --version
    exit 1
fi

# Check scan-build is available.
if ! command -v scan-build &> /dev/null; then
    echo "scan-build is not available" && exit 1
fi

# Remove old reports.
rm -rf clangScanBuildReports && mkdir clangScanBuildReports
rm -rf ${t_build} && mkdir ${t_build}

cd ${t_build} || exit 1
args="-o clangScanBuildReports"
args="$args --use-cc=clang"
args="$args -disable-checker core.NullDereference"
scan-build $args cmake -G Ninja ../. > /dev/null
scan-build $args ninja wt > ../$t_out 2>&1
cd ..

# Compare the set of errors/warnings and exit success when they're expected.
# clang_scan outputs errors/warnings with a leading file path followed by a
# colon, followed by the string "error:" or "warning:".
cat $t_out |
    grep -E '^[a-z\./].*error: |^[a-z\./].*warning: ' |
    sed -e 's/^.*wiredtiger/wiredtiger/' |
    sort > $t_out_filtered
diff dist/s_clang_scan.diff $t_out_filtered > /dev/null && exit 0

echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
echo 'scan-build output differs from expected:'
echo '<<<<<<<<<< Expected >>>>>>>>>> Current'
echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
diff dist/s_clang_scan.diff $t_out_filtered
exit 1
