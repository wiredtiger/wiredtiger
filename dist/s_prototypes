#! /bin/sh

# Build a list of internal function and variable prototypes.
t=__wt.$$
trap 'rm -f $t; exit 0' 0 1 2 3 13 15

# proto --
#	extract public functions.
proto()
{
	sed -n \
	    -e '/^__wt_[a-z]/!{' \
		-e h \
		-e d \
	    -e '}' \
	    -e x \
	    -e '/^static/d' \
	    -e x \
	    -e ': loop' \
	    -e H \
	    -e n \
	    -e '/;/b end' \
	    -e '/^{/!b loop' \
	    -e ': end' \
	    -e x \
	    -e 's/ =.*$//' \
	    -e '/#/!s/\n/ /g' \
	    -e 's/\* /\*/g' \
	    -e 's/  */ /g' \
	    -e 's/^/extern /' \
	    -e 's/WT_GCC_FUNC_/WT_GCC_FUNC_DECL_/g' \
	    -e '# If a line ends in #endif, appending a semicolon will result' \
	    -e '# in an illegal expression, force an appended newline using' \
	    -e '# the H command because substitute may not allow newline in' \
	    -e '# the RHS of the expression.' \
	    -e '/#endif$/{' \
		-e x \
		-e 's/.*//' \
		-e H \
		-e x \
	    -e '}' \
	    -e 's/$/;/' \
	    -e p < $1
}

l=`sed \
    -e '/^[a-z]/!d' \
    -e '/os_posix/d' \
    -e 's/[	 ].*$//' filelist`
(
cat <<EOF
/* DO NOT EDIT: automatically built by dist/s_prototypes. */

EOF
for i in $l; do
	proto ../$i
done) > $t
f=../src/include/extern_win.h
cmp $t $f > /dev/null 2>&1 ||
    (echo "Building $f" && rm -f $f && cp $t $f)

l=`sed \
    -e '/^[a-z]/!d' \
    -e '/os_win/d' \
    -e 's/[	 ].*$//' filelist`
(
cat <<EOF
/* DO NOT EDIT: automatically built by dist/s_prototypes. */
EOF
for i in $l; do
	proto ../$i
done) > $t
f=../src/include/extern.h
cmp $t $f > /dev/null 2>&1 ||
    (echo "Building $f" && rm -f $f && cp $t $f)

