#!/bin/bash

# Run standard scripts.

t=__wt.$$
t_pfx=__s_all_tmp_

allchildpids() { # Recursively get PIDs of all child processes.
    ps -o pid,ppid | python3 -c '
import re, os, sys
children = {}   # Map from parent PID to list of child PIDs.
for line in sys.stdin.readlines():
    (pid, ppid) = [*re.findall("""(\d+)""", line), 0, 0][:2]
    if pid and ppid and pid != str(os.getpid()):
        if ppid not in children: children[ppid] = []
        children[ppid].append(pid)
pids = children[sys.argv[1]].copy() if sys.argv[1] in children else []
while len(pids):
    (pid, pids) = (pids[0], pids[1:])   # pop one element and shift the list.
    print(pid)
    if pid in children: pids.extend(children[pid])
' $$
}

trap '
    exitcode=$?
    # Kill all child processes recursively.
    kill `allchildpids` 2>/dev/null
    # Cleanup in both current and parent dir.
    rm -f {,../}{$t,*.pyc,__tmp*,__wt.*,__s_all_tmp*}
    # Do not attempt to continue execution.
    exit $exitcode
' 0 1 2 3 13 15

# We require python3 which may not be installed.
type python3 > /dev/null 2>&1 || {
    echo 's_all: python3 not found'
    exit 1
}

echo 'dist/s_all run started...'

fast=""
force=
errmode=0
errfound=0

while :
    do case "$1" in
    -E)    # Return an error code on failure
        errmode=1
        shift;;
    -f)    # Force versions to be updated
        force="-f"
        shift;;
    -F)    # Run fast.
        echo "dist/s_all running in fast mode..."
        fast="-F"
        shift;;
    *)
        break;;
    esac
done

echo "Updating files that include the package version" &&
    bash ./s_version $force

errchk()
{
    if ! `test -s $2`; then
        return
    fi

    echo '#########' s_all run of: "$1" resulted in:$'\n'"$(cat $2)"$'\n''#########'

    if grep -q "$1.*skipped" $2 || [[ "$3" = "--warning-only" ]]; then
        : # If the test was skipped or marked warning only, ignore the failure.
    else
        errfound=1;
        echo "$1" >> "${t_pfx}_errfound"
    fi

    rm -f $2
}

run()
{
    local cmd="$1" flags="$2"
    local name="${cmd%% *}"
    local t="${t_pfx}-${name}-$$"
    [[ "$name" =~ .*\.py$ ]] && cmd="python3 $cmd" || cmd="/bin/bash $cmd"
    $cmd > $t 2>&1
    errchk "$name" "$t" "$flags"
}

# Non parallelizable scripts. The following scripts either modify files or
# already parallelize internally.
run "s_readme $force"
run "s_install $force"
run "api_config_gen.py"
run "api_err.py"
run "flags.py"
run "log.py"
run "stat.py"
run "verbose.py"
run "s_copyright"
run "s_style $fast"
run "s_clang_format $fast"
run "prototypes.py"
run "s_typedef -b"
run "test_tag.py"
run "s_mentions" "--warning-only"

# Run in parallel:
run "s_define" &
run "s_docs" &
run "s_evergreen" &
run "s_evergreen_validate $fast" &
run "s_export" &
run "s_free" &
run "s_funcs" &
run "s_function $fast" &
run "s_getopt" &
run "s_lang" &
run "s_longlines" &
run "s_python" &
run "s_stat" &
run "s_string" &
run "s_tags" &
run "s_typedef -c" &
run "s_visibility_checks" &
run "s_void" &
run "s_whitespace" &
run "function.py" &
run "style.py" &
run "comment_style.py $fast" &
run "type_to_str.py" &
wait

[[ -s "${t_pfx}_errfound" ]] && errfound=1

echo "dist/s_all run finished. Error? $errfound"
[[ $errfound -ne 0 ]] && echo Fatal errors reported by: `cat "${t_pfx}_errfound"`
if test $errmode -ne 0; then
    exit $errfound;
fi
exit 0
