#! /bin/bash

set -o pipefail

t=__wt.$$
trap 'rm -rf $t' 0 1 2 3 13 15

download_clang_format() {
    version=$1
    arch_and_os="$(uname -m)-$(uname)"
    archive=dist/clang-format.tar.gz

    # Adding more clang-format binaries requires uploading them to boxes.10gen
    # You can either get the clang-format binary from the llvm releases page
    # (https://github.com/llvm/llvm-project/releases) or compile clang-format yourself.
    # Place the binary in dist/ and confirm that s_clang_format runs correctly, then
    # tar a folder containing just the clang-format binary with the format:
    # clang-format-llvm-${version}-${arch_and_os}/
    #     clang-format
    # into a tarball named clang-format-llvm-${version}-${arch_and_os}.tar.gz
    # The tarball should extract using the tar command below.
    # This tarball can then be uploaded via a Jira request to the BUILD team.
    if [[ "$arch_and_os" =~ ^("aarch64-Linux"|"x86_64-Darwin"|"arm64-Darwin"|"x86_64-Linux")$ ]] ; then
        curl https://s3.amazonaws.com/boxes.10gen.com/build/clang-format-llvm-"$version"-"$arch_and_os".tar.gz -o $archive
        tar --strip=1 -C dist/ -xf $archive clang-format-llvm-"$version"-"$arch_and_os"/clang-format && rm $archive
        chmod +x ./dist/clang-format

        if [[ "$arch_and_os" =~ ^("x86_64-Darwin"|"arm64-Darwin")$ ]] ; then
            # Needed to get around the macOS code signing issue.
            xattr -c ./dist/clang-format
        fi
    else
         echo "$0: unsupported architecture and OS combination '$arch_and_os' to run clang_format"
         return 1
    fi
}

# Find the top-level WiredTiger directory and move to there.
cd `git rev-parse --show-toplevel` || exit 1

# Override existing Clang Format versions in the PATH.
export PATH="${PWD}/dist":$PATH

# Check if Clang-Format is already available with the desired version.
desired_version="12.0.1"
if ! command -v clang-format &> /dev/null; then
    download_clang_format $desired_version || exit 1
elif ! clang-format --version | grep -q $desired_version; then
    download_clang_format $desired_version || exit 1
fi

case $# in
0)
	# Get all source files that aren't in s_clang-format.list.
	search=`find bench examples ext src test -name '*.[ch]' -o -name '*.cxx' -o -name '*.cpp'`
	for f in `cat dist/s_clang-format.list`; do
		search=`echo "$search" | sed "\#$f#d"`
	done;;
1)
	search="$1";;
*)
	echo "usage: $0 [file]"
	exit 1;;
esac

# Don't format inplace with -i flag.
# We want to be able to detect modifications.
for f in $search; do
	cat "$f" | \
            clang-format --fallback-style=none | \
            python dist/s_comment.py > "$t" || exit 1
	cmp -s "$f" "$t"
	if test $? -ne 0; then
		if test $# -eq 0 ; then
			echo "Modifying $f"
		fi
		cp "$t" "$f"
	fi
done
