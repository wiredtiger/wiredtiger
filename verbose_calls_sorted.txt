notes: __wt_verbose_worker just uses whatever is manually set as the level
for that category, so i'm ignoring those.

a lot of stuff assumes only one debug level, e.g. in block_compact:
if (LEVEL_ISSET(DEBUG_1))
  some_logging_function();

some_logging_function() {
   // various other expensive ops
   log_stuff(DEBUG_1);
}

given that we now probably want __wt_verbose_debugX replacing the single
__wt_verbose_debug, this might have warranted a technical design to consider
the above two issues.

block_vrfy: assuming that these are called infrequently/in bad situations,
so i'm leaving them as DEBUG_1.

block manager: i'm assuming that opening files, creating and tearing down
block caches are relatively uncommon.

src/btree/bt_curnext.c:589:    __wt_verbose_error(session, WT_VERB_OUT_OF_ORDER,
src/btree/bt_curnext.c:625:    __wt_verbose_error(session, WT_VERB_OUT_OF_ORDER,
src/btree/bt_debug.c:72:    return (__wt_verbose_config(session, cfg, true));
src/btree/bt_handle.c:321:    if (WT_VERBOSE_ISSET(session, WT_VERB_VERSION)) {
src/btree/bt_handle.c:326:        __wt_verbose(session, WT_VERB_VERSION, "%" PRId64 ".%" PRId64, maj_version, min_version);
src/btree/bt_handle.c:975:        __wt_verbose_notice(session, WT_VERB_SPLIT,
src/btree/bt_import.c:134:    __wt_verbose(session, WT_VERB_CHECKPOINT, "import metadata: %s", config);
src/btree/bt_slvg.c:1107:    __wt_verbose(session, WT_VERB_SALVAGE, "%s and %s require merge",
src/btree/bt_slvg.c:1168:            __wt_verbose(session, WT_VERB_SALVAGE,
src/btree/bt_slvg.c:1302:    __wt_verbose(session, WT_VERB_SALVAGE,
src/btree/bt_slvg.c:1320:        __wt_verbose(session, WT_VERB_SALVAGE, "%s merge inserting %" PRIu64 " missing records",
src/btree/bt_slvg.c:1522:    __wt_verbose(session, WT_VERB_SALVAGE, "%s and %s range overlap",
src/btree/bt_slvg.c:1697:    __wt_verbose(session, WT_VERB_SALVAGE, "%s and %s require merge",
src/btree/bt_slvg.c:1938:            __wt_verbose(session, WT_VERB_SALVAGE, "%s merge discarding leading key %s",
src/btree/bt_slvg.c:1953:            __wt_verbose(session, WT_VERB_SALVAGE, "%s merge discarding trailing key %s",
src/btree/bt_slvg.c:2220:            __wt_verbose(session, WT_VERB_SALVAGE, "%s references unavailable overflow page %s",
src/btree/bt_slvg.c:2413:        __wt_verbose(session, WT_VERB_SALVAGE, "%s unused overflow page",
src/btree/bt_slvg.c:2476:    __wt_verbose(session, WT_VERB_SALVAGE, "%s blocks discarded: discard freed file bytes %" PRIu32,
src/btree/bt_slvg.c:485:            __wt_verbose(session, WT_VERB_SALVAGE, "%s page ignored %s",
src/btree/bt_slvg.c:499:            __wt_verbose(session, WT_VERB_SALVAGE, "%s page failed verify %s",
src/btree/bt_slvg.c:505:        __wt_verbose(session, WT_VERB_SALVAGE, "tracking %s page, generation %" PRIu64 " %s",
src/btree/bt_slvg.c:618:            __wt_verbose(session, WT_VERB_SALVAGE, "%s records %" PRIu64 "-%" PRIu64,
src/btree/bt_slvg.c:645:            __wt_verbose(session, WT_VERB_SALVAGE,
src/btree/bt_slvg.c:669:        __wt_verbose(session, WT_VERB_SALVAGE, "%s records %" PRIu64 "-%" PRIu64,
src/btree/bt_slvg.c:697:        __wt_verbose(session, WT_VERB_SALVAGE, "%s start key %s",
src/btree/bt_slvg.c:701:        __wt_verbose(session, WT_VERB_SALVAGE, "%s stop key %s",
src/btree/bt_slvg.c:774:            __wt_verbose(session, WT_VERB_SALVAGE, "%s overflow reference %s",
src/btree/bt_slvg.c:938:    __wt_verbose(session, WT_VERB_SALVAGE, "%s and %s range overlap",
src/btree/bt_split.c:2075:    __wt_verbose(session, WT_VERB_SPLIT, "%p: split-insert", (void *)ref);
src/btree/bt_split.c:2184:    __wt_verbose(session, WT_VERB_SPLIT, "%p: split-multi", (void *)ref);
src/btree/bt_split.c:2220:    __wt_verbose(session, WT_VERB_SPLIT, "%p: reverse-split", (void *)ref);
src/btree/bt_split.c:2243:    __wt_verbose(session, WT_VERB_SPLIT, "%p: split-rewrite", (void *)ref);
src/btree/bt_split.c:432:    __wt_verbose(session, WT_VERB_SPLIT,
src/btree/bt_split.c:841:    __wt_verbose(session, WT_VERB_SPLIT,
src/btree/bt_split.c:937:    __wt_verbose(session, WT_VERB_SPLIT,
src/btree/bt_sync.c:139:        __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP, "%p: skipping root page", (void *)ref);
src/btree/bt_sync.c:145:        __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP,
src/btree/bt_sync.c:152:        __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP, "%p: skipping deleted page", (void *)ref);
src/btree/bt_sync.c:194:        __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP,
src/btree/bt_sync.c:209:        __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP, "%p: skipping page", (void *)ref);
src/btree/bt_sync.c:292:    __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP,
src/btree/bt_sync.c:316:    __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP,
src/btree/bt_sync.c:390:        __wt_verbose(session, WT_VERB_CHECKPOINT_CLEANUP, "%p: page walk skipped", (void *)ref);
src/btree/bt_sync.c:428:    time_start = WT_VERBOSE_ISSET(session, WT_VERB_CHECKPOINT) ? __wt_clock(session) : 0;
src/btree/bt_sync.c:652:        __wt_verbose(session, WT_VERB_CHECKPOINT,
src/btree/bt_vrfy.c:227:        __wt_verbose(session, WT_VERB_VERIFY, "%s: checkpoint %s", name, ckpt->name);
src/btree/bt_vrfy.c:410:    __wt_verbose(session, WT_VERB_VERIFY, "%s %s", __verify_addr_string(session, ref, vs->tmp1),
src/conn/conn_api.c:1240:        WT_ERR(__wt_verbose_dump_cache(session));
src/conn/conn_api.c:1244:        WT_ERR(__wt_verbose_dump_sessions(session, true));
src/conn/conn_api.c:1248:        WT_ERR(__wt_verbose_dump_handles(session));
src/conn/conn_api.c:1252:        WT_ERR(__wt_verbose_dump_log(session));
src/conn/conn_api.c:1256:        WT_ERR(__wt_verbose_dump_sessions(session, false));
src/conn/conn_api.c:1260:        WT_ERR(__wt_verbose_dump_txn(session));
src/conn/conn_api.c:2089: * __wt_verbose_config --
src/conn/conn_api.c:2093:__wt_verbose_config(WT_SESSION_IMPL *session, const char *cfg[], bool reconfig)
src/conn/conn_api.c:2144:             * the event to WT_VERBOSE_DEBUG_1. Correspondingly, all legacy uses of '__wt_verbose',
src/conn/conn_api.c:2166: * __wt_verbose_dump_sessions --
src/conn/conn_api.c:2170:__wt_verbose_dump_sessions(WT_SESSION_IMPL *session, bool show_cursors)
src/conn/conn_api.c:2215:            WT_ERR(__wt_verbose_dump_txn_one(session, s, 0, NULL));
src/conn/conn_api.c:2830:    WT_ERR(__wt_verbose_config(session, cfg, false));
src/conn/conn_api.c:2940:    __wt_verbose(session, WT_VERB_VERSION, "%s", WIREDTIGER_VERSION_STRING);
src/conn/conn_cache_pool.c:203:    __wt_verbose(session, WT_VERB_SHARED_CACHE,
src/conn/conn_cache_pool.c:255:    __wt_verbose(session, WT_VERB_SHARED_CACHE, "Added %s to cache pool %s", conn->home, cp->name);
src/conn/conn_cache_pool.c:309:        __wt_verbose(session, WT_VERB_SHARED_CACHE, "Removing %s from cache pool", entry->home);
src/conn/conn_cache_pool.c:353:        __wt_verbose(session, WT_VERB_SHARED_CACHE, "%s", "Destroying cache pool");
src/conn/conn_cache_pool.c:378:            __wt_verbose(
src/conn/conn_cache_pool.c:512:        __wt_verbose(session, WT_VERB_SHARED_CACHE,
src/conn/conn_cache_pool.c:517:    __wt_verbose(session, WT_VERB_SHARED_CACHE,
src/conn/conn_cache_pool.c:549:    if (WT_VERBOSE_ISSET(session, WT_VERB_SHARED_CACHE)) {
src/conn/conn_cache_pool.c:550:        __wt_verbose(session, WT_VERB_SHARED_CACHE, "%s", "Cache pool distribution: ");
src/conn/conn_cache_pool.c:551:        __wt_verbose(session, WT_VERB_SHARED_CACHE, "%s",
src/conn/conn_cache_pool.c:572:        __wt_verbose(session, WT_VERB_SHARED_CACHE,
src/conn/conn_cache_pool.c:669:            __wt_verbose(session, WT_VERB_SHARED_CACHE, "Allocated %s%" PRIu64 " to %s",
src/conn/conn_cache_pool.c:710:            __wt_verbose(session, WT_VERB_SHARED_CACHE, "%s", "Cache pool switched manager thread");
src/conn/conn_cache_pool.c:99:        __wt_verbose(session, WT_VERB_SHARED_CACHE, "Created cache pool %s", cp->name);
src/conn/conn_dhandle.c:1015: * __wt_verbose_dump_handles --
src/conn/conn_dhandle.c:1019:__wt_verbose_dump_handles(WT_SESSION_IMPL *session)
src/conn/conn_log.c:423:    __wt_verbose(session, WT_VERB_LOG, "log_remove: remove to log number %" PRIu32, min_lognum);
src/conn/conn_log.c:485:        __wt_verbose(session, WT_VERB_LOG, "Missed %" PRIu32 ". Now pre-allocating up to %" PRIu32,
src/conn/conn_log.c:492:        __wt_verbose(session, WT_VERB_LOG,
src/conn/conn_log.c:546:    __wt_verbose(
src/conn/conn_log.c:909:                    __wt_verbose(session, WT_VERB_LOG, "%s",
src/conn/conn_reconfig.c:423:    WT_ERR(__wt_verbose_config(session, cfg, true));
src/conn/conn_tiered.c:56:        __wt_verbose(session, WT_VERB_TIERED, "REMOVE_LOCAL: %s at %" PRIu64, object, now);
src/conn/conn_tiered.c:63:            __wt_verbose(session, WT_VERB_TIERED, "REMOVE_LOCAL: %s in USE, queue again", object);
src/conn/conn_tiered.c:78:            __wt_verbose(session, WT_VERB_TIERED, "REMOVE_LOCAL: actually remove %s", object);
src/cursor/cur_backup.c:205:        __wt_verbose(
src/cursor/cur_backup.c:345:            __wt_verbose(session, WT_VERB_BACKUP, "Free blk[%u] entry", i);
src/cursor/cur_backup.c:348:        __wt_verbose(session, WT_VERB_BACKUP, "Entry blk[%u] has flags 0x%" PRIx8, i, blk->flags);
src/cursor/cur_backup.c:358:        __wt_verbose(
src/cursor/cur_backup.c:374:        __wt_verbose(session, WT_VERB_BACKUP,
src/cursor/cur_backup.c:379:        __wt_verbose(session, WT_VERB_BACKUP, "Backup id %s using backup slot %u", blk->id_str, i);
src/cursor/cur_backup.c:413:            __wt_verbose(
src/cursor/cur_backup.c:418:    __wt_verbose(session, WT_VERB_BACKUP, "Search %.*s not found", (int)cval->len, cval->str);
src/cursor/cur_backup.c:486:            __wt_verbose(session, WT_VERB_BACKUP, "Backup config set granularity value %" PRIu64,
src/cursor/cur_backup_incr.c:157:        __wt_verbose(session, WT_VERB_BACKUP, "Set key WT_BACKUP_FILE %s size %" PRIuMAX,
src/cursor/cur_backup_incr.c:186:                    __wt_verbose(session, WT_VERB_BACKUP,
src/cursor/cur_backup_incr.c:223:        __wt_verbose(session, WT_VERB_BACKUP,
src/cursor/cur_backup_incr.c:285:        __wt_verbose(session, WT_VERB_BACKUP, "Forcing full file copies for %s for id %s",
src/cursor/cur_backup_incr.c:74:        __wt_verbose(session, WT_VERB_BACKUP,
src/cursor/cur_backup_incr.c:77:        __wt_verbose(session, WT_VERB_BACKUP, "Modified incr block config: \"%s\"", config);
src/cursor/cur_file.c:538:        __wt_verbose_notice(session, WT_VERB_ERROR_RETURNS, "%s",
src/evict/evict_lru.c:1121:            __wt_verbose(session, WT_VERB_EVICTSERVER, "%s", "added worker thread");
src/evict/evict_lru.c:2056:        __wt_verbose(session, WT_VERB_EVICTSERVER, "select: %p, size %" WT_SIZET_FMT, (void *)page,
src/evict/evict_lru.c:2064:    __wt_verbose(session, WT_VERB_EVICTSERVER, "%s walk: seen %" PRIu64 ", queued %" PRIu64,
src/evict/evict_lru.c:2409:                __wt_verbose_debug(
src/evict/evict_lru.c:240:    if (WT_VERBOSE_ISSET(session, WT_VERB_EVICTSERVER)) {
src/evict/evict_lru.c:245:        __wt_verbose(session, WT_VERB_EVICTSERVER,
src/evict/evict_lru.c:2478:            __wt_verbose_notice(session, WT_VERB_TRANSACTION, "%s", session->txn->rollback_reason);
src/evict/evict_lru.c:2704: * __wt_verbose_dump_cache --
src/evict/evict_lru.c:2708:__wt_verbose_dump_cache(WT_SESSION_IMPL *session)
src/evict/evict_lru.c:313:            __wt_verbose(session, WT_VERB_EVICTSERVER, "%s", "sleeping");
src/evict/evict_lru.c:317:            __wt_verbose(session, WT_VERB_EVICTSERVER, "%s", "waking");
src/evict/evict_lru.c:361:    __wt_verbose(session, WT_VERB_EVICTSERVER, "%s", "cache eviction thread exiting");
src/evict/evict_lru.c:433:        if (WT_VERBOSE_ISSET(session, WT_VERB_EVICT_STUCK))
src/evict/evict_lru.c:441:    if (!WT_VERBOSE_ISSET(session, WT_VERB_EVICT_STUCK))
src/evict/evict_lru.c:474:        WT_RET(__wt_verbose_dump_txn(session));
src/evict/evict_lru.c:475:        WT_RET(__wt_verbose_dump_cache(session));
src/evict/evict_lru.c:478:        if (WT_VERBOSE_ISSET(session, WT_VERB_EVICT_STUCK)) {
src/evict/evict_lru.c:479:            WT_RET(__wt_verbose_dump_txn(session));
src/evict/evict_lru.c:480:            WT_RET(__wt_verbose_dump_cache(session));
src/evict/evict_lru.c:526:    if (WT_VERBOSE_ISSET(session, WT_VERB_EVICTSERVER))
src/evict/evict_lru.c:563:    __wt_verbose(session, WT_VERB_EVICTSERVER, "%s", "waiting for helper threads");
src/evict/evict_lru.c:734:        __wt_verbose(session, WT_VERB_EVICTSERVER,
src/evict/evict_lru.c:796:            __wt_verbose(session, WT_VERB_EVICTSERVER, "%s", "unable to reach eviction goal");
src/evict/evict_page.c:116:    __wt_verbose(
src/history/hs_rec.c:1002:            __wt_verbose(session, WT_VERB_TIMESTAMP,
src/history/hs_rec.c:31:    if (!WT_VERBOSE_ISSET(session, WT_VERB_HS) && !WT_VERBOSE_ISSET(session, WT_VERB_HS_ACTIVITY))
src/history/hs_rec.c:43:    if (WT_VERBOSE_ISSET(session, WT_VERB_HS) ||
src/history/hs_rec.c:49:        __wt_verbose_multi(session,
src/history/hs_rec.c:59:    if (WT_VERBOSE_ISSET(session, WT_VERB_HS))
src/include/api.h:67:    __wt_verbose((s), WT_VERB_API, "%s", "CALL: " #h ":" #n)
src/include/extern.h:1653:extern int __wt_verbose_config(WT_SESSION_IMPL *session, const char *cfg[], bool reconfig)
src/include/extern.h:1655:extern int __wt_verbose_dump_cache(WT_SESSION_IMPL *session)
src/include/extern.h:1657:extern int __wt_verbose_dump_handles(WT_SESSION_IMPL *session)
src/include/extern.h:1659:extern int __wt_verbose_dump_log(WT_SESSION_IMPL *session)
src/include/extern.h:1661:extern int __wt_verbose_dump_sessions(WT_SESSION_IMPL *session, bool show_cursors)
src/include/extern.h:1663:extern int __wt_verbose_dump_txn(WT_SESSION_IMPL *session)
src/include/extern.h:1665:extern int __wt_verbose_dump_txn_one(WT_SESSION_IMPL *session, WT_SESSION_IMPL *txn_session,
src/include/extern.h:1928:extern void __wt_verbose_timestamp(WT_SESSION_IMPL *session, wt_timestamp_t ts, const char *msg);
src/include/extern.h:1929:extern void __wt_verbose_worker(WT_SESSION_IMPL *session, WT_VERBOSE_CATEGORY category,
src/include/os_fhandle_inline.h:109:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: handle-read: %" WT_SIZET_FMT " at %" PRIuMAX,
src/include/os_fhandle_inline.h:135:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: handle-size", fh->handle->name);
src/include/os_fhandle_inline.h:154:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: handle-truncate: to %" PRIuMAX, fh->handle->name,
src/include/os_fhandle_inline.h:188:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: handle-write: %" WT_SIZET_FMT " at %" PRIuMAX,
src/include/os_fhandle_inline.h:27:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: handle-sync", fh->handle->name);
src/include/os_fhandle_inline.h:61:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: handle-extend: to %" PRIuMAX, fh->handle->name,
src/include/os_fhandle_inline.h:92:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: handle-lock: %s", fh->handle->name,
src/include/os_fs_inline.h:111:    __wt_verbose(session, WT_VERB_FILEOPS, "%s: file-exist", name);
src/include/os_fs_inline.h:137:    __wt_verbose(session, WT_VERB_FILEOPS, "%s: file-remove", name);
src/include/os_fs_inline.h:172:    __wt_verbose(session, WT_VERB_FILEOPS, "%s to %s: file-rename", from, to);
src/include/os_fs_inline.h:212:    __wt_verbose(session, WT_VERB_FILEOPS, "%s: file-size", name);
src/include/os_fs_inline.h:35:    __wt_verbose(session, WT_VERB_FILEOPS, "%s: directory-list: prefix %s", dir,
src/include/os_fs_inline.h:64:    __wt_verbose(session, WT_VERB_FILEOPS, "%s: directory-list-single: prefix %s", dir,
src/include/txn_inline.h:1433:            __wt_verbose_debug(session, WT_VERB_TRANSACTION,
src/include/txn_inline.h:1459:                    __wt_verbose_debug(session, WT_VERB_TRANSACTION,
src/include/txn_inline.h:1465:                    __wt_verbose_debug(session, WT_VERB_TRANSACTION,
src/include/txn_inline.h:1474:        if (WT_VERBOSE_LEVEL_ISSET(session, WT_VERB_TRANSACTION, WT_VERBOSE_DEBUG_1)) {
src/include/txn_inline.h:1486:            __wt_verbose_debug(session, WT_VERB_TRANSACTION, "%s", (const char *)buf->data);
src/include/verbose.h:112:struct __wt_verbose_multi_category {
src/include/verbose.h:125:#define WT_VERBOSE_LEVEL_ISSET(session, category, level) (level <= S2C(session)->verbose[category])
src/include/verbose.h:131:#define WT_VERBOSE_ISSET(session, category) \
src/include/verbose.h:132:    WT_VERBOSE_LEVEL_ISSET(session, category, WT_VERBOSE_LEVEL_DEFAULT)
src/include/verbose.h:135: * __wt_verbose_level --
src/include/verbose.h:138:#define __wt_verbose_level(session, category, level, fmt, ...)               \
src/include/verbose.h:140:        if (WT_VERBOSE_LEVEL_ISSET(session, category, level))                \
src/include/verbose.h:141:            __wt_verbose_worker(session, category, level, fmt, __VA_ARGS__); \
src/include/verbose.h:145: * __wt_verbose_error --
src/include/verbose.h:146: *     Wrapper to __wt_verbose_level defaulting the verbosity level to WT_VERBOSE_ERROR.
src/include/verbose.h:148:#define __wt_verbose_error(session, category, fmt, ...) \
src/include/verbose.h:149:    __wt_verbose_level(session, category, WT_VERBOSE_ERROR, fmt, __VA_ARGS__)
src/include/verbose.h:152: * __wt_verbose_warning --
src/include/verbose.h:153: *     Wrapper to __wt_verbose_level defaulting the verbosity level to WT_VERBOSE_WARNING.
src/include/verbose.h:155:#define __wt_verbose_warning(session, category, fmt, ...) \
src/include/verbose.h:156:    __wt_verbose_level(session, category, WT_VERBOSE_WARNING, fmt, __VA_ARGS__)
src/include/verbose.h:159: * __wt_verbose_notice --
src/include/verbose.h:160: *     Wrapper to __wt_verbose_level defaulting the verbosity level to WT_VERBOSE_NOTICE.
src/include/verbose.h:162:#define __wt_verbose_notice(session, category, fmt, ...) \
src/include/verbose.h:163:    __wt_verbose_level(session, category, WT_VERBOSE_NOTICE, fmt, __VA_ARGS__)
src/include/verbose.h:166: * __wt_verbose_info --
src/include/verbose.h:167: *     Wrapper to __wt_verbose_level defaulting the verbosity level to WT_VERBOSE_INFO.
src/include/verbose.h:169:#define __wt_verbose_info(session, category, fmt, ...) \
src/include/verbose.h:170:    __wt_verbose_level(session, category, WT_VERBOSE_INFO, fmt, __VA_ARGS__)
src/include/verbose.h:173: * __wt_verbose_debug --
src/include/verbose.h:174: *     Wrapper to __wt_verbose_level using the default verbosity level.
src/include/verbose.h:176:#define __wt_verbose_debug(session, category, fmt, ...) \
src/include/verbose.h:177:    __wt_verbose_level(session, category, WT_VERBOSE_DEBUG_1, fmt, __VA_ARGS__)
src/include/verbose.h:180: * __wt_verbose --
src/include/verbose.h:187:#define __wt_verbose(session, category, fmt, ...) \
src/include/verbose.h:188:    __wt_verbose_level(session, category, WT_VERBOSE_LEVEL_DEFAULT, fmt, __VA_ARGS__)
src/include/verbose.h:191: * __wt_verbose_level_multi --
src/include/verbose.h:195:#define __wt_verbose_level_multi(session, multi_category, level, fmt, ...)                    \
src/include/verbose.h:199:            if (WT_VERBOSE_LEVEL_ISSET(session, multi_category.categories[__v_idx], level)) { \
src/include/verbose.h:200:                __wt_verbose_worker(                                                          \
src/include/verbose.h:208: * __wt_verbose_multi --
src/include/verbose.h:212:#define __wt_verbose_multi(session, multi_category, fmt, ...)                    \
src/include/verbose.h:216:            if (WT_VERBOSE_ISSET(session, multi_category.categories[__v_idx])) { \
src/include/verbose.h:217:                __wt_verbose_worker(session, multi_category.categories[__v_idx], \
src/include/wt_internal.h:372:struct __wt_verbose_multi_category;
src/include/wt_internal.h:373:typedef struct __wt_verbose_multi_category WT_VERBOSE_MULTI_CATEGORY;
src/log/log.c:1001:            __wt_verbose_notice(session, WT_VERB_LOG,
src/log/log.c:1009:        __wt_verbose_notice(session, WT_VERB_LOG,
src/log/log.c:1015:        __wt_verbose_notice(session, WT_VERB_LOG,
src/log/log.c:1062:    __wt_verbose(session, WT_VERB_LOG, "log_alloc_prealloc: rename log %s to %s",
src/log/log.c:1411:        __wt_verbose_notice(
src/log/log.c:1458:            __wt_verbose_notice(session, WT_VERB_LOG,
src/log/log.c:1462:            __wt_verbose_notice(session, WT_VERB_LOG,
src/log/log.c:1509:    __wt_verbose(session, WT_VERB_LOG, "log_allocfile: rename %s to %s",
src/log/log.c:1536:    __wt_verbose(session, WT_VERB_LOG, "log_remove: remove log %s", (const char *)path->data);
src/log/log.c:1597:        __wt_verbose(session, WT_VERB_LOG, "log_open: open fh to directory %s", conn->log_path);
src/log/log.c:1620:    __wt_verbose(
src/log/log.c:1639:            __wt_verbose_notice(
src/log/log.c:1704:        __wt_verbose(session, WT_VERB_LOG, "closing old log %s", log->log_close_fh->name);
src/log/log.c:1710:        __wt_verbose(session, WT_VERB_LOG, "closing log %s", log->log_fh->name);
src/log/log.c:1717:        __wt_verbose(session, WT_VERB_LOG, "closing log directory %s", log->log_dir_fh->name);
src/log/log.c:1956:            __wt_verbose(session, WT_VERB_LOG,
src/log/log.c:1972:            __wt_verbose(session, WT_VERB_LOG,
src/log/log.c:2007:    __wt_verbose_notice(session, WT_VERB_LOG,
src/log/log.c:2138:        __wt_verbose(session, WT_VERB_RECOVERY_PROGRESS,
src/log/log.c:2170:                __wt_verbose(session, WT_VERB_LOG, "Truncate end of log %" PRIu32 "/%" PRIu32,
src/log/log.c:2189:                __wt_verbose(session, WT_VERB_RECOVERY_PROGRESS,
src/log/log.c:2210:                __wt_verbose(session, WT_VERB_LOG,
src/log/log.c:2377:        __wt_verbose(session, WT_VERB_LOG,
src/log/log.c:2755:    __wt_verbose(session, WT_VERB_LOG, "log_printf: %s", (char *)logrec->data + logrec->size);
src/log/log.c:2801:    __wt_verbose(session, WT_VERB_LOG, "log_flush: flags %#" PRIx32 " LSN %" PRIu32 "/%" PRIu32,
src/log/log.c:301:        __wt_verbose(session, WT_VERB_LOG,
src/log/log.c:322:        __wt_verbose(session, WT_VERB_LOG, "log_force_sync: sync %s to LSN %" PRIu32 "/%" PRIu32,
src/log/log.c:822:    __wt_verbose(session, WT_VERB_LOG, "opening log %s", (const char *)buf->data);
src/log/log.c:938:        __wt_verbose(session, WT_VERB_LOG, "Log %s found empty log after header", fh->name);
src/log/log.c:994:        __wt_verbose_notice(session, WT_VERB_LOG,
src/log/log_slot.c:27:    ret = __wt_verbose_dump_log(session);
src/log/log_sys.c:90: * __wt_verbose_dump_log --
src/log/log_sys.c:94:__wt_verbose_dump_log(WT_SESSION_IMPL *session)
src/lsm/lsm_cursor.c:348:    __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_cursor.c:590:    __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_manager.c:397:                __wt_verbose(session, WT_VERB_LSM_MANAGER,
src/lsm/lsm_merge.c:115:        __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_merge.c:375:    if (WT_VERBOSE_ISSET(session, WT_VERB_LSM)) {
src/lsm/lsm_merge.c:376:        __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_merge.c:380:            __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_merge.c:456:    __wt_verbose(session, WT_VERB_LSM, "Bloom size for %" PRIu64 " has %" PRIu64 " items inserted",
src/lsm/lsm_merge.c:583:            __wt_verbose(session, WT_VERB_LSM, "%s", "Merge aborted due to close");
src/lsm/lsm_merge.c:585:            __wt_verbose(
src/lsm/lsm_tree.c:1150:        __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_tree.c:1169:        __wt_verbose(session, WT_VERB_LSM, "COMPACT: Start compacting %s", lsm_tree->name);
src/lsm/lsm_tree.c:1183:                __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_tree.c:1192:                __wt_verbose(
src/lsm/lsm_tree.c:1245:    __wt_verbose(session, WT_VERB_LSM, "Compact %s complete, return %d", name, ret);
src/lsm/lsm_tree.c:729:    __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_work_unit.c:117:        __wt_verbose(session, WT_VERB_LSM, "Flush%s: return chunk %" PRIu32 " of %" PRIu32 ": %s",
src/lsm/lsm_work_unit.c:367:        __wt_verbose(session, WT_VERB_LSM, "LSM worker %s already on disk", chunk->uri);
src/lsm/lsm_work_unit.c:381:        __wt_verbose(
src/lsm/lsm_work_unit.c:389:    __wt_verbose(session, WT_VERB_LSM, "LSM worker flushing %s", chunk->uri);
src/lsm/lsm_work_unit.c:412:    __wt_verbose(session, WT_VERB_LSM, "LSM worker checkpointing %s", chunk->uri);
src/lsm/lsm_work_unit.c:457:    __wt_verbose(session, WT_VERB_LSM, "LSM worker checkpointed %s", chunk->uri);
src/lsm/lsm_work_unit.c:574:    __wt_verbose(session, WT_VERB_LSM,
src/lsm/lsm_work_unit.c:639:    __wt_verbose(session, WT_VERB_LSM, "Dropped %s", uri);
src/lsm/lsm_work_unit.c:642:        __wt_verbose(session, WT_VERB_LSM, "LSM worker drop of %s failed with %d", uri, ret);
src/lsm/lsm_worker.c:21:    __wt_verbose(
src/lsm/lsm_worker.c:71:            __wt_verbose(session, WT_VERB_LSM, "Flush%s chunk %" PRIu32 " %s",
src/meta/meta_ckpt.c:1530:    __wt_verbose(session, WT_VERB_CHECKPOINT_PROGRESS,
src/meta/meta_ckpt.c:1727:            __wt_verbose(session, WT_VERB_RECOVERY, "Recovery %s %.*s", timestamp_name,
src/meta/meta_table.c:186:    __wt_verbose(session, WT_VERB_METADATA,
src/meta/meta_table.c:216:    __wt_verbose(session, WT_VERB_METADATA,
src/meta/meta_table.c:252:    __wt_verbose(session, WT_VERB_METADATA,
src/meta/meta_table.c:296:    __wt_verbose(session, WT_VERB_METADATA,
src/meta/meta_turtle.c:389:    __wt_verbose_notice(session, WT_VERB_METADATA, "%s not found, %s renamed to %s",
src/meta/meta_turtle.c:549:            __wt_verbose_notice(session, WT_VERB_METADATA,
src/os_common/os_fhandle.c:164:    if (!WT_VERBOSE_ISSET(session, WT_VERB_FILEOPS))
src/os_common/os_fhandle.c:188:    __wt_verbose(session, WT_VERB_FILEOPS, "%s: file-open: type %s%s", name,
src/os_common/os_fhandle.c:327:    __wt_verbose(session, WT_VERB_FILEOPS, "%s: file-close", fh->name);
src/os_posix/os_fs.c:1029:    __wt_verbose(session, WT_VERB_FILEOPS,
src/os_posix/os_fs.c:1066:    __wt_verbose(session, WT_VERB_FILEOPS, "%s, prepare-remap-file: buffer=%p", file_handle->name,
src/os_posix/os_fs.c:1121:    __wt_verbose(session, WT_VERB_FILEOPS, "%s, remap-file: buffer=%p", file_handle->name,
src/os_posix/os_fs.c:1148:    __wt_verbose(session, WT_VERB_FILEOPS, "%s, file-unmap: buffer=%p, size=%" PRId64,
src/os_posix/os_fs.c:346:    __wt_verbose(session, WT_VERB_FILEOPS, "%s, file-close: fd=%d", file_handle->name, pfh->fd);
src/os_posix/os_fs.c:414:    __wt_verbose(session, WT_VERB_READ, "read: %s, fd=%d, offset=%" PRId64 ", len=%" WT_SIZET_FMT,
src/os_posix/os_fs.c:459:    __wt_verbose(session, WT_VERB_READ,
src/os_posix/os_fs.c:567:    __wt_verbose(session, WT_VERB_FILEOPS,
src/os_posix/os_fs.c:605:    __wt_verbose(session, WT_VERB_WRITE, "write: %s, fd=%d, offset=%" PRId64 ", len=%" WT_SIZET_FMT,
src/os_posix/os_fs.c:643:    __wt_verbose(session, WT_VERB_WRITE,
src/os_posix/os_map.c:158:    __wt_verbose(
src/os_posix/os_map.c:44:    __wt_verbose(
src/os_posix/os_mtx_cond.c:155:    __wt_verbose(session, WT_VERB_MUTEX, "signal %s", cond->name);
src/os_posix/os_mtx_cond.c:75:    __wt_verbose(session, WT_VERB_MUTEX, "wait %s", cond->name);
src/os_win/os_map.c:37:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: memory-map: %" WT_SIZET_FMT " bytes",
src/os_win/os_map.c:83:    __wt_verbose(session, WT_VERB_HANDLEOPS, "%s: memory-unmap: %" WT_SIZET_FMT " bytes",
src/os_win/os_mtx_cond.c:132:    __wt_verbose(session, WT_VERB_MUTEX, "signal %s", cond->name);
src/os_win/os_mtx_cond.c:55:    __wt_verbose(session, WT_VERB_MUTEX, "wait %s", cond->name);
src/reconcile/rec_track.c:134:    if (WT_VERBOSE_ISSET(session, WT_VERB_OVERFLOW))
src/reconcile/rec_track.c:169:    __wt_verbose(session, WT_VERB_OVERFLOW, "reuse: %s%s%p %s (%s%s%s) {%.*s}",
src/reconcile/rec_track.c:342:        if (WT_VERBOSE_ISSET(session, WT_VERB_OVERFLOW))
src/reconcile/rec_track.c:397:        if (WT_VERBOSE_ISSET(session, WT_VERB_OVERFLOW))
src/reconcile/rec_track.c:439:    if (WT_VERBOSE_ISSET(session, WT_VERB_OVERFLOW))
src/reconcile/rec_track.c:46:    __wt_verbose(session, WT_VERB_OVERFLOW, "discard: %s%s%p %s", tag == NULL ? "" : tag,
src/reconcile/rec_track.c:494:    if (WT_VERBOSE_ISSET(session, WT_VERB_OVERFLOW))
src/reconcile/rec_track.c:89:        if (WT_VERBOSE_ISSET(session, WT_VERB_OVERFLOW))
src/reconcile/rec_visibility.c:310:        __wt_verbose(session, WT_VERB_TIMESTAMP,
src/reconcile/rec_write.c:2375:    __wt_verbose(session, WT_VERB_SPLIT, "split: %" PRIu32 " pages", r->multi_next);
src/reconcile/rec_write.c:2380:            __wt_verbose(session, WT_VERB_SPLIT, "starting key %s",
src/reconcile/rec_write.c:2386:            __wt_verbose(session, WT_VERB_SPLIT, "starting recno %" PRIu64, multi->key.recno);
src/reconcile/rec_write.c:2479:    __wt_verbose(session, WT_VERB_RECONCILE, "%p reconciled into %" PRIu32 " pages", (void *)ref,
src/reconcile/rec_write.c:2547:        if (WT_VERBOSE_ISSET(session, WT_VERB_SPLIT))
src/reconcile/rec_write.c:43:    __wt_verbose(session, WT_VERB_RECONCILE, "%p reconcile %s (%s%s)", (void *)ref,
src/reconcile/rec_write.c:450:    __wt_verbose(
src/schema/schema_drop.c:212:        __wt_verbose(session, WT_VERB_TIERED, "DROP_TIERED: drop local object %s", tier->name);
src/schema/schema_drop.c:229:        __wt_verbose(session, WT_VERB_TIERED, "DROP_TIERED: drop shared object %s", tier->name);
src/schema/schema_drop.c:244:        __wt_verbose(session, WT_VERB_TIERED, "DROP_TIERED: remove object %s from metadata", name);
src/schema/schema_drop.c:248:        __wt_verbose(session, WT_VERB_TIERED, "DROP_TIERED: remove object %s from metadata", name);
src/schema/schema_drop.c:289:    __wt_verbose(session, WT_VERB_TIERED, "DROP_TIERED: remove tiered table %s from metadata", uri);
src/session/session_api.c:683:        __wt_verbose(session, WT_VERB_BACKUP, "Backup cursor config \"%s\"", config);
src/session/session_compact.c:198:        __wt_verbose_info(session, WT_VERB_COMPACT,
src/session/session_compact.c:292:                __wt_verbose_info(session, WT_VERB_COMPACT, "%s",
src/session/session_compact.c:346:        __wt_verbose_warning(
src/support/err.c:593:    __wt_verbose(session, WT_VERB_ERROR_RETURNS, "%s: %d Error: %d", func, line, err);
src/support/err.c:621: * __wt_verbose_worker --
src/support/err.c:625:__wt_verbose_worker(WT_SESSION_IMPL *session, WT_VERBOSE_CATEGORY category, WT_VERBOSE_LEVEL level,
src/support/generation.c:170:                    __wt_verbose_notice(session, WT_VERB_GENERATION,
src/support/thread_group.c:144:    __wt_verbose(session, WT_VERB_THREAD_GROUP,
src/support/thread_group.c:197:        __wt_verbose(session, WT_VERB_THREAD_GROUP, "Starting utility thread: %s:%" PRIu32,
src/support/thread_group.c:274:    __wt_verbose(session, WT_VERB_THREAD_GROUP, "Creating thread group: %s", name);
src/support/thread_group.c:310:    __wt_verbose(session, WT_VERB_THREAD_GROUP, "Destroying thread group: %s", group->name);
src/support/thread_group.c:350:        __wt_verbose(session, WT_VERB_THREAD_GROUP, "Activating utility thread: %s:%" PRIu32,
src/support/thread_group.c:376:        __wt_verbose(session, WT_VERB_THREAD_GROUP, "Pausing utility thread: %s:%" PRIu32,
src/support/thread_group.c:84:        __wt_verbose(session, WT_VERB_THREAD_GROUP, "Stopping utility thread: %s:%" PRIu32,
src/support/timestamp.c:110: * __wt_verbose_timestamp --
src/support/timestamp.c:114:__wt_verbose_timestamp(WT_SESSION_IMPL *session, wt_timestamp_t ts, const char *msg)
src/support/timestamp.c:118:    __wt_verbose(
src/tiered/tiered_config.c:170:    __wt_verbose(session, WT_VERB_TIERED, "TIERED_CONFIG: bucket %s", conn->bstorage->bucket);
src/tiered/tiered_config.c:171:    __wt_verbose(
src/tiered/tiered_handle.c:161:        __wt_verbose(
src/tiered/tiered_handle.c:209:    __wt_verbose(session, WT_VERB_TIERED, "TIER_CREATE_LOCAL: LOCAL: %s", name);
src/tiered/tiered_handle.c:212:    __wt_verbose(session, WT_VERB_TIERED, "TIER_CREATE_LOCAL: obj_config: %s : %s", name, cfg[1]);
src/tiered/tiered_handle.c:239:    __wt_verbose(
src/tiered/tiered_handle.c:305:            __wt_verbose(session, WT_VERB_TIERED,
src/tiered/tiered_handle.c:33:    __wt_verbose(session, WT_VERB_TIERED, "NAME_CHECK: check for %s", name);
src/tiered/tiered_handle.c:345:    __wt_verbose(
src/tiered/tiered_handle.c:36:    __wt_verbose(session, WT_VERB_TIERED, "NAME_CHECK: Got %d files", (int)obj_count);
src/tiered/tiered_handle.c:388:        __wt_verbose(
src/tiered/tiered_handle.c:458:        __wt_verbose(
src/tiered/tiered_handle.c:463:    __wt_verbose(session, WT_VERB_TIERED, "UPDATE_DH: DONE ret %d", ret);
src/tiered/tiered_handle.c:487:            __wt_verbose(session, WT_VERB_TIERED, "TIER_SET_META: names[%" PRIu32 "] NULL", i);
src/tiered/tiered_handle.c:490:        __wt_verbose(session, WT_VERB_TIERED, "TIER_SET_META: names[%" PRIu32 "]: %s", i,
src/tiered/tiered_handle.c:521:    __wt_verbose(
src/tiered/tiered_handle.c:545:    __wt_verbose(
src/tiered/tiered_handle.c:54:        __wt_verbose(session, WT_VERB_TIERED, "NAME_CHECK: %d %s", (int)i, obj_files[i]);
src/tiered/tiered_handle.c:599:    __wt_verbose(session, WT_VERB_TIERED, "TIER_SWITCH: DONE ret %d", ret);
src/tiered/tiered_handle.c:659:    __wt_verbose(session, WT_VERB_TIERED, "Generated tiered name: %s", *retp);
src/tiered/tiered_handle.c:67:            __wt_verbose(
src/tiered/tiered_handle.c:734:    __wt_verbose(session, WT_VERB_TIERED, "TIERED_OPEN: obj_config %s", tiered->obj_config);
src/tiered/tiered_handle.c:753:    __wt_verbose(session, WT_VERB_TIERED,
src/tiered/tiered_handle.c:776:        __wt_verbose(
src/tiered/tiered_handle.c:798:    __wt_verbose(session, WT_VERB_TIERED, "TIERED_OPEN: Done ret %d", ret);
src/tiered/tiered_handle.c:844:    __wt_verbose(session, WT_VERB_TIERED, "TIERED_CLOSE: called final %d", (int) final);
src/tiered/tiered_handle.c:857:    __wt_verbose(session, WT_VERB_TIERED, "TIERED_DISCARD: called final %d", (int) final);
src/tiered/tiered_handle.c:878:    __wt_verbose(session, WT_VERB_TIERED, "TIERED_TREE_OPEN: Called %s", session->dhandle->name);
src/tiered/tiered_handle.c:894:        __wt_verbose(
src/tiered/tiered_handle.c:912:    __wt_verbose(session, WT_VERB_TIERED, "TIERED_TREE_CLOSE: called %s", tiered_tree->iface.name);
src/txn/txn.c:1181:        __wt_verbose(session, WT_VERB_TRANSACTION,
src/txn/txn.c:1188:        __wt_verbose(session, WT_VERB_TRANSACTION,
src/txn/txn.c:1792:        WT_ERR(__wt_verbose_dump_sessions(session, true));
src/txn/txn.c:2432:            __wt_verbose(session, WT_VERB_RTS,
src/txn/txn.c:2499: * __wt_verbose_dump_txn_one --
src/txn/txn.c:2503:__wt_verbose_dump_txn_one(
src/txn/txn.c:2569: * __wt_verbose_dump_txn --
src/txn/txn.c:2573:__wt_verbose_dump_txn(WT_SESSION_IMPL *session)
src/txn/txn.c:2640:        WT_RET(__wt_verbose_dump_txn_one(session, sess, 0, NULL));
src/txn/txn.c:491:        if (WT_VERBOSE_ISSET(session, WT_VERB_TRANSACTION) && current_id - oldest_id > 10000 &&
src/txn/txn.c:493:            __wt_verbose(session, WT_VERB_TRANSACTION,
src/txn/txn.c:765:    __wt_verbose(session, WT_VERB_TRANSACTION,
src/txn/txn.c:785:        __wt_verbose(session, WT_VERB_TRANSACTION,
src/txn/txn_ckpt.c:109:            __wt_verbose(
src/txn/txn_ckpt.c:425:            __wt_verbose_notice(session, WT_VERB_CHECKPOINT, "%s",
src/txn/txn_ckpt.c:560:        __wt_verbose(session, WT_VERB_CHECKPOINT_PROGRESS,
src/txn/txn_ckpt.c:618:    if (!WT_VERBOSE_ISSET(session, WT_VERB_CHECKPOINT))
src/txn/txn_ckpt.c:626:    __wt_verbose(session, WT_VERB_CHECKPOINT,
src/txn/txn_ckpt.c:783:        __wt_verbose_timestamp(
src/txn/txn_ckpt.c:80:    __wt_verbose(session, WT_VERB_TIERED, "CKPT_FLUSH_TIER: Called force %d", force);
src/txn/txn_recover.c:109:    __wt_verbose(session, WT_VERB_RECOVERY,                                          \
src/txn/txn_recover.c:403:    __wt_verbose_multi(session, WT_VERB_RECOVERY_ALL, "Set global recovery timestamp: %s",
src/txn/txn_recover.c:432:    __wt_verbose_multi(session, WT_VERB_RECOVERY_ALL, "Set global oldest timestamp: %s",
src/txn/txn_recover.c:590:    __wt_verbose(r->session, WT_VERB_RECOVERY,
src/txn/txn_recover.c:76:            __wt_verbose(
src/txn/txn_recover.c:901:    __wt_verbose_multi(session, WT_VERB_RECOVERY_ALL,
src/txn/txn_recover.c:922:        __wt_verbose_multi(session, WT_VERB_RECOVERY_ALL, "%s",
src/txn/txn_recover.c:990:        __wt_verbose_multi(session,
src/txn/txn_rollback_to_stable.c:119:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1217:    __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1243:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session), "%p: page skipped", (void *)ref);
src/txn/txn_rollback_to_stable.c:1248:    __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1316:            __wt_verbose_multi(
src/txn/txn_rollback_to_stable.c:1337:        __wt_verbose_multi(
src/txn/txn_rollback_to_stable.c:1380:    __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1457:        WT_TRET(__wt_verbose_dump_txn(session));
src/txn/txn_rollback_to_stable.c:1526:    __wt_verbose(session, WT_VERB_RECOVERY_PROGRESS,
src/txn/txn_rollback_to_stable.c:1596:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1601:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1639:        __wt_verbose(session, WT_VERB_RECOVERY_PROGRESS,
src/txn/txn_rollback_to_stable.c:1751:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1784:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1794:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1894:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1955:    __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:1961:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:385:    __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session), "rolling back the on-disk key: %s",
src/txn/txn_rollback_to_stable.c:443:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:473:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:525:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:535:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:579:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:618:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:637:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session), "%s", "key removed");
src/txn/txn_rollback_to_stable.c:705:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:720:        __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:787:            __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session),
src/txn/txn_rollback_to_stable.c:824:    __wt_verbose_multi(session, WT_VERB_RECOVERY_RTS(session), "removing the key%s: %s",
src/txn/txn_timestamp.c:300:        __wt_verbose_timestamp(session, pinned_timestamp, "Updated pinned timestamp");
src/txn/txn_timestamp.c:410:        __wt_verbose_timestamp(session, durable_ts, "Updated global durable timestamp");
src/txn/txn_timestamp.c:419:        __wt_verbose_timestamp(session, oldest_ts, "Updated global oldest timestamp");
src/txn/txn_timestamp.c:428:        __wt_verbose_timestamp(session, stable_ts, "Updated global stable timestamp");
src/txn/txn_timestamp.c:747:                __wt_verbose(session, WT_VERB_TIMESTAMP,
src/txn/txn_timestamp.c:833:            __wt_verbose_notice(session, WT_VERB_TIMESTAMP,
src/txn/txn_timestamp.c:850:        __wt_verbose(session, WT_VERB_TIMESTAMP,
