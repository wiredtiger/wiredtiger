/*! @arch_page arch-session Session

@section arch_session_def Definition
After a @ref arch-connection has been established between the application and WiredTiger, the
application can start sending requests to WiredTiger using a session. A session is internally
represented by WT_SESSION and plays an important role since almost all operations require one.

A session can only be created through an existing connection with the API
WT_CONNECTION::open_session. It is possible to create multiple sessions through the same connection.
In fact, one connection can have multiple sessions but one session can only be associated with one
connection. The maximum number of sessions is set through the configuration item \c session_max as
part of the configuration string given in ::wiredtiger_open.

Sessions that are created by the calling application are called "user session". It exists another
type of session called "internal session". Internal sessions are created and managed by WiredTiger
internally and they are related to global services at runtime such as @ref arch-eviction, @ref
arch-checkpoint, @ref arch-rts, ...

@section arch_session_ops Operations
The different operations a session can request to WiredTiger are related to cursors handles, table
operations and transactions. You can read the complete description of each possible operation in the
documentation related to WT_SESSION.

@section arch_session_txn Transactions
It is possible to group a number of operations within a session, in other words, multiple operations
can be treated as a single atomic operation. This can be done using @ref arch-transaction.
Furthermore, one session can hold a unique transaction at any given time and this transaction only
belongs to that session.

@section arch_session_cur Cursors
A session can perform multiple data operations on same/different collections using multiple cursors
(see @ref arch-cursor for more details). All the cursors associated with a session will share that
session transaction context. It is also possible to cache those cursors if required through the
configuration string given to WT_CONNECTION::open_session or ::wiredtiger_open.

@section arch_session_dhandles Data Handles
During its lifetime, a session can accumulate a list of data handles (see @ref arch-dhandle).
Indeed, when a session accesses a table for the first time, the data handle of that table is
acquired and cached. Once a session no longer needs to operate on a table, it will mark the
associated data handle as idle. This helps the sweep server to release data handles that are
inactive, see @ref arch-dhandle-lifecycle for more details.

@section arch_session_closure Closure
When a connection is no longer needed, it can be closed using WT_CONNECTION::close. This closes the
transaction and the cursors associated with the session and frees all the resources that are exclusive
to the session.

@section arch_session_thread Multithreading
A session is always executed as a single thread, see @ref threads for more details.

*/
