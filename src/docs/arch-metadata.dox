/*! @arch_page arch-metadata Metadata

Metadata in WiredTiger captures important information about the users database.
Metadata includes tracking essential information such as the files and tables
present in the database, their associated configurations, as well as the latest checkpoints of
each those files.

The main metadata in WiredTiger is stored in the \c WiredTiger.wt file. The
\c WiredTiger.wt file being a table itself.

@section metadata_table Metadata Table

The keys in the \c WiredTiger.wt table are \c uri strings. The \c uri keys can be strings
representing:
- WiredTiger Tables and Files: \c "table:" & \c "file:"
- Indexes: \c "index:"
- Colgroups: \c "colgroup:"
- System values: \c "system". Representing special system values.

The value corresponding to a given \c uri key in the metadata table is its
associated configuration string.  The configuration value itself is a list of key/value
pairs in string form.  The key/value pairs in the configuration strings are dependent on the
type of \c uri.  Thus, a metadata entry with a \c uri key beginning with \c "table:" will be
a configuration string having entries such as \c key_format and \c value_format to
describe the data encoding for the uri. A metadata key beginning with
\c "file:" will have a different set of configuration entries associated
with it.

@section metadata_checkpoint Storing Checkpoint Metadata

Metadata plays an important role in the WiredTiger checkpointing process. Metadata is used to store
the latest checkpoint information for each btree in the system. The checkpoint metadata providing a known
point in time in which WiredTiger can recover from (e.g after a crash or unexpected shutdown).
The checkpoint metadata for a given btree is stored within the configuration string under its
associated \c uri key within the \c WiredTiger.wt table. Metadata configuration entries relevant to capturing
a given btrees checkpoint state include:
- \c checkpoint: The files checkpoint entries, including their timestamp, transaction ID and write generation.
- \c checkpoint_lsn: The LSN of the last checkpoint.
- \c checkpoint_backup_info:  Incremental checkpoint backup information.

Additionally, the metadata table \c WiredTiger.wt is a btree itself that needs to be checkpointed. Since a
new metadata entry needs to be created for each btree at the time of checkpointing, the metadata table is the last
file to be checkpointed in the process. Checkpointing the metadata table last is important
for capturing a consistent metadata state of the btrees in the database at the time of the last checkpoint.

@section metadata_turtle Turtle file

WiredTiger maintains a special turtle file called \c "WiredTiger.turtle" inside the db directory. This containing the
most recent checkpointing information of the \c WiredTiger.wt metadata file. Using the turtle file, WiredTiger can
read the latest checkpoint information when recovering the \c WiredTiger.wt table. Recovering the checkpoint
of the \c WiredTiger.wt table in turn helps restore a consistent view of the checkpointing information for the other btrees in
the system.

@section metadata_reading Reading Metadata

The contents of the metadata table is ASCII printable. The URIs and configuration values
are all printable \c C strings.

@subsection metadata_cursor "metadata:" cursor

To read the metadata, a caller can open a cursor with a \c uri equal
to \c "metadata:". When opening a metadata cursor (through \c WT_SESSION::open_cursor), a user can
only read the available metadata. Changes to the metadata cannot be written through the metadata
cursor interface i.e. the metadata cursor is a read-only interface. Metadata is only changed/affected 
by API calls such as WT_SESSION::create, WT_SESSION::drop, WT_SESSION::rename & WT_SESSION::alter.

@subsection metadata_create_cursor "metadata:create" cursor

Additionally, if you want to only read strings relating to creation configurations of the various
\c uri keys present, you can open a cursor with a \c uri equal to \c "metadata:create". This stripping out
internal metadata when querying.

@subsection metadata_wt_util Printing metadata with the wt utility

Lastly you can dump the metadata in the \c WiredTiger.wt table using the \c wt utility. Running
\c "wt dump file:WiredTiger.wt" will display the various \c uri key strings with their associated
configuration strings.
*/
