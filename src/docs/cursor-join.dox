/*! @m_page{{c,java},cursor_join,Join cursors}

Join cursors provide a way to iterate over a subset of a table, where the subset is specified by relationships with reference cursors.

A join cursor is created with WT_SESSION::open_cursor using a \c
"join:table:<name>" URI prefix.  Then reference cursors are positioned to
keys on indices and joined to the join cursor using WT_SESSION::join calls.
The result is a join cursor that can be iterated to satisfy the join
equation.

Here is an example using join cursors:

@snippet ex_schema.c Join cursors

Joins support various comparison operators: \c "eq", \c "gt", \c "ge", \c "lt", \c "le".  Ranges with lower and upper bounds can also be specified, by joining two cursors on the same index, for example, one with \c "compare=ge" and another \c "compare=lt".  In addition to joining indices, the main table can be joined so that a range of primary keys can be specified.

All the joins should be done on the join cursor before WT_CURSOR::next is called.  Calling WT_CURSOR::next on a join cursor for the first time populates any bloom filters and performs other initialization.  The join cursor's key is the primary key (the key for the main table), and its value is the entire set of values of the main table.  A join cursor can be created with a projection by appending \c "(col1,col2,...)" to the URI if a different set of values is needed.

*/
