/*! @arch_page arch-backup Backup

# Overview #

Backup in WiredTiger can be performed using the \c "backup:" cursors. WiredTiger
supports four types of backups.

1. Full database
2. Block based incremental backup
3. Log based incremental backup
4. Target backup

# Full database #

When the application opens the backup cursor, internally WT collects all the tables
that are present in the database and stores them in a list to let them be backed up.
As part of the process of collecting the list of files to be backed up, WT takes the
schema lock to block any modifications to create/drop new tables in the database.
In addition to table creation, there is a contract that all files that exist at the
time the backup starts exist for the duration of the backup.

As part of backup, WT internally collects all the log files also that are present in the
database and stores them in a list to let them to be backed up. These log files are
required to make the backup consistent. As part of collecting the log files, forces a
log file switch and it does not allow any log files to be archived/removed. WT doesn't
use any pre allocated log files and create new set of log files.

Once the backup is started successfully, any checkpoints that exist on the database
before backup starts are retained until the backup finishes. All the newer checkpoints
that are created during the backup in progress are cleaned whenever a newer checkpoint
is created. So longer backup time should not increase the disk size of the database other
than the expected growth.

Note: No two backups can run in parallel.

# Block based incremental backup #

Block based incremental backup is performed by tracking the modified blocks in the checkpoint.
whenever a new checkpoint occurs on a table, the new blocks that are allocated for this
checkpoint are recorded as a bit string. This bit string information is gets updated with
every new checkpoint.

Whenever the incremental backup cursor is opened to perform the backup. WT returns all the
modified file offsets and sizes that are modified after the full backup.

# Log based incremental backup #

When backup cursor is opened with target as \c log: the log based incremental backup
is performed by adding all the existing log files in the database to the list of files
that needs to be copied.

# Target backup #

It is a kind of full backup but WT collects only the target tables that are specified
when the backup cursor opened. The target table is locked in exclusive mode to backup
the indexes of the table also.

*/
