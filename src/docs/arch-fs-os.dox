/*! @arch_page arch-fs-os File System Interface and Operating System Support

@section multiple_os Support for Multiple Operating Systems
WiredTiger supports multiple operating systems through maintaining
a separate set of implementations for each operating system (POSIX, Windows).
In further technical detail, WiredTiger would compile the specific Operating
System implementations, by checking the current machine's operating system
and choose to compile with either the os_posix or os_win folder. Special
structures and definitions are also specifically defined based on the
operating system, using the methodology and reside in either posix.h
or os_windows.h

@section file_system_and_handle WiredTiger File System and File Handle Interface
WiredTiger provides a file system and file handle abstraction layer to support
all the possible different filesystems, accomodating specific features or behaviours.
The file system interface's main responsibility is to provide an interface to call
directory type calls, dealing with the creation, deletion, and the metadata information
for file within a directory. The file handle interface's main responsibility is to
provide a functionality to change the internals of a specific file,
e.g. read, write operations.

@subsection file_system File System Interface
WiredTiger defines the file system interface through WT_FILE_SYSTEM and is usually
initialised when a WiredTiger connection is open. The interface has a set of function
pointers that represent the file system specific functionalities that WiredTiger
supports for a directory. In particular WiredTiger has already defined POSIX and Windows
file system function implementations in os_fs.c located in the os_posix and os_win folder
respectively.

@subsection file_handle WiredTiger File Handle Structure
WiredTiger defines the file handle interface through WT_FILE_HANDLE, and is usually
initialised when WT_FILE_SYSTEM::fs_open_file is called. The interface contains a set
of function pointers that represent I/O type operations for a specific file. WiredTiger
mainly uses WT_FILE_HANDLE within another structure, to customise for
specific features or behaviours.

In particular, WiredTiger maintains it's own file handle implementation using the file
handle interface WT_FILE_HANDLE called WT_FH. WT_FH contains extra information on the
file and provides data structures around accessing the file handle. WiredTiger accesses
WT_FH through the usage of a linked list data structure, which has a next and previous
pointer to other file handle entries. Furthermore WiredTiger provides support for POSIX
and Windows file I/O operations, through the structures of WT_FILE_HANDLE_POSIX and
WT_FILE_HANDLE_WIN respectively.

@subsection file_customisation WiredTiger File System and Handle Customisation
WiredTiger also provides an API which allows programs to register their own
customised file system using the WT_CONNECTION::set_file_system function.
Programs will need to implement their own file system structure and file handle
implementations. The WT_FILE_SYSTEM::fs_open_file function is responsible for
maintaining the creation of file handles. @ex_ref{ex_file_system.c} shows an
example of how the file system and file handles can be customised.

@subsection file_system_inmemory WiredTiger File System and Handle in memory
WiredTiger also supports a special type of file system and handles, which
is responsible for when in_memory is configured. The in_memory configuration
changes WiredTiger to run only in cache with no disk writes. WiredTiger maintains
each file data through providing an in memory buffer for each file handle. Both
in memory file system  and file handle implementations can be within os_fs_inmemory.c.

@subsection file_stream WiredTiger File Stream
WiredTiger has an implementation of file stream called WT_FSTREAM muchalike file
streams in the C library https://www.gnu.org/software/libc/manual/html_node/Standard-Streams.html.
WT_FSTREAM contains an internal buffer, and stdio file pointer FILE* with each file
handle WT_FH.

@section filesystem_usage Multiple System Architecture Support
WiredTiger also has support for different system architectures inside gcc.h, which
currently supports x86_64, i386, mips, ppc, aarch64, s390x, and sparc architectures.
*/
