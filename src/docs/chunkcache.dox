/*! @page chunkcache Chunkcache

@section pinned Pinned Content

This functionality allows users to provide a list of tables that should remain persistently cached, ensuring faster data access times and reducing the need to
fetch data from potentially much slower block storage. If a user wishes to cache a table in the chunk cache (such that the cached chunks belonging to these tables
are non-evictable), the pinned configuration is required.

<b>Note:</b> It is crucial to assess the memory implications of pinning large tables. Ensure the chunkcache has enough capacity to cache the pinned tables.

Example Configuration:
@code
chunk_cache=[enabled=true,chunk_size=512KB,capacity=20GB,pinned=("table:chunkcache01", "table:chunkcache02")]
@endcode

In the configuration above, the pinned configuration array contains the names of tables to be pinned. In this example, the tables <b>chunkcache01</b> and <b>chunkcache02</b> are specified.
By marking tables as pinned in the chunk cache, all chunks belonging to these tables (when read into chunkcache) remain in the cache. These chunks won't be evicted,
regardless of how infrequently they might be accessed.

<b>Note:</b> There could be circumstances when the pinned chunks can become unpinned (and evicted) for internal reasons.

This ensures that the pinned tables are always relatively cheap to access, minimizing the performance overhead of accessing these tables.

@section inserts Newly inserted or modified content

Newer content is more likely to be accessed again, so we insert freshly-flushed data into the chunkcache. This minimizes latency and reduces resource usage (disk bandwidth and API access).
This saves the chunkcache from having to read freshly-flushed data back from the object store soon after it was put there. When a tiered object is flushed and before it is deleted locally, we make an ingest call and the new or modified table will be inserted into the chunkcache.
This function will also check for outdated pinned content in the chunk cache, ensuring the older versions of the pinned content can be cleaned up by chunk cache's eviction process.

@section persistence Persisted content

The chunk cache could contain a considerable quantity of content. This
content would typically be on-disk, meaning it can be persisted across
WiredTiger restarts. Doing this saves the user time (due to reduced latency
when accessing data from disk, compared to networked block storage) and
resources (as these block storage accesses are often associated with an API
usage cost).

This persistence is implemented with an additional WiredTiger internal file,
named WiredTigerCC (where "CC" stands for "chunk cache"). This maintains the
metadata necessary for WiredTiger to reuse chunk cache content on startup.
This content could become stale, in which case a checksum failure is
detected when we attempt to use it. This will result in a logged message and
some data being re-fetched from block storage.

The persisted chunk cache content is invalidated when a salvage operation is
run, a WiredTiger upgrade changes the metadata format, or when any of the
chunk cache capacity, chunk size, or number of buckets is changed.

*/
