/*! @m_page{{c,java},operation_tracking,Track function calls}

When this option is enabled, WiredTiger tracks all API calls as well as certain
functions that are deemed important for performance, such as eviction-related
functions. Tracking is performed by generating a log record when the WiredTiger
library enters and exits a tracked function. A log record contains a function
name and its timestamp. For the purposes of efficiency, the timestamp on most
platforms is obtained directly from the CPU register, so the units of time
correspond to processor clock ticks.

By default, the log files are produced in the same directory as the database
files. Two kinds of files are being produced the actual log files and the map
file. The map file is needed to convert the binary log files into text
format. The map file contains the mapping between numeric function ids used in
the log files and the human-readable function name. The map file is called
`optrack-map.<pid>.txt`, where `pid` is the id of the process that generated the
map file. Log files have names that look like `optrack.<pid>.<tid>`, where `tid`
is the numeric id of the WiredTiger session that generated the log file. If you
would like the log files to be deposited in a directory other than the default,
please set the `WIREDTIGER_OPTRACK` environmental variable to point to the
directory of your choice.

To convert binary log files to text, run the wt_optrack_decode.py script in the
tools directory of the WiredTiger distribution. The script takes as arguments
the list of log files and the name of the map file with the `-m` option. Suppose
you would like to convert the log files generated by a process with `pid
1234`. Then you would run the script as follows:

```
python wt_optrack_decode.py -m optrack-map.1234.txt optrack.1234.*
```

Enabling operation tracking may generate performance overhead if the tracked
functions are executed frequently. Please be aware of this consequence and
measure your performance before deciding whether to enable operation tracking.

*/
