/*! @arch_page arch-btree B-Trees

Database tables are commonly represented by a B-Tree data structure, which
is made up of nodes that are page structures. The root and internal pages will
only store keys and references to other pages, while leaf pages store keys,
values and sometimes references to overflow pages. The focus here will be on
the in-memory representation of the B-Tree which is defined in \c btmem.h. The
on-disk representation and organization of pages is discussed in the
@ref arch-data-file page.

@section btree_btree_data_source B-Tree Data Source (WT_BTREE)

As discussed in the @ref arch-dhandle page, dhandles are generic containers used
to access various types of data sources. Dhandles that represent B-Trees contain a
pointer to the \c WT_BTREE. The \c WT_BTREE (defined in \c btree.h) embodies both
the on-disk and in-memory representations of the B-Tree. At a high-level, it
contains a memory cache of key value pairs, along with functions to read and write
data as needed to and from the data file. More specifically, the structure contains
a reference to its corresponding generic data handle, checkpoint information, the
specific WT_BTREE type, key and value formats, collator, key and page size
configurations, split information, a reference to the root page on disk, write
generation information, sync information, eviction information, and a set of flags.

@section btree_btree_in_memory_representation B-Tree In-Memory Representation

Inside a \c WT_BTREE, the reference to the root page is a \c WT_REF, which is a
reference to a page that may or may not be loaded from storage. Once the page
is loaded, the \c WT_REF will have a valid \c WT_PAGE pointer which represents
the in-memory page. The \c WT_REF structure also contains a reference page (for
splits), a set of either internal- or leaf-page flags, an address, and
fast-truncate information; either a \c WT_PAGE_DELETED structure if the page is not
instantiated in memory or an update list otherwise. In-memory internal pages have
an array of pointers (\c WT_PAGE_INDEX) to child structures, maintained in collated
order, and a child page of an internal page may cause a split at any time.
In-memory internal pages also store a reference to their parent reference and the
generation of the last split.

An in-memory row-store leaf page contains key/value pairs represented by the
\c WT_ROW structure. These structures are created from on-page data. Each row may
have some old values, or deleted values. Entries on leaf pages can be updated,
either modified or deleted. On a given page, a WT_UPDATE array will be allocated
with enough slots for every existing element in the page. A slot points to a
\c WT_UPDATE structure, and \c WT_UPDATE structures can be formed into a linked
list when multiple updates are done for an entry. New key/value pairs can also be
inserted into row-store leaf pages (\c WT_INSERT).

@section btree_btree_truncate B-Tree Truncate

TODO The truncate operation allows for fast deletion of records, as it is possible
to mark whole pages for deletion without having to inspect each record individually.

*/