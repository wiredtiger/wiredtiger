/*! @page cursors Cursors

Common operations in WiredTiger are performed using WT_CURSOR handles.
A cursor includes:

- a position within a data source
- getter/setters for key and value fields
- encoding of fields to store in the data source
- methods to navigate within and iterate through the data

See @subpage cursor_ops for a description of how to use cursors.

@section cursors_transactions Cursors and Transactions

If there is a transaction active in a session, cursors operate in the
context of that transaction.  Reads performed while a transaction is
active inherit the isolation level of the transaction, and updates
performed within a transaction are made durable by calling
WT_SESSION::commit_transaction, or discarded by calling
WT_SESSION::rollback_transaction.

If no transaction is active, cursor reads are performed at the isolation
level of the session, set with the \c isolation configuration key to
WT_CONNECTION::open_session and successful updates are automatically
committed before the update operation completes.

Any operation that consists of multiple related updates should be
enclosed in an explicit transaction to ensure that the updates are
applied atomically.

At \c read-committed (the default) or \c snapshot isolation levels,
committed changes from concurrent transactions become visible when no
cursor is positioned.  In other words, at these isolation levels, all
cursors in a session read from a stable snapshot while any cursor in the
session remains positioned.

Cursor positions do not survive transaction boundaries.  When a
transaction is started with the WT_SESSION::begin_transaction or ended
with either WT_SESSION::commit_transaction or
WT_SESSION::rollback_transaction, all open cursors are reset, as if the
WT_CURSOR::reset method was called.  The cursor reset discards any
cursor position as well as the key and value.

Applications that need to continue an operation across a transaction
boundary must make a copy of the cursor's key, and re-position the cursor
with WT_CURSOR::search to continue the operation, dealing with cases
where the record may no longer be available due to a WT_CURSOR::remove
or WT_SESSION::rollback_transaction.

See @ref transactions for more information.

@section cursor_types Cursor types

The following are some of the common builtin cursor types:

<table>
  @hrow{URI, Type, Notes}
  @row{<tt>backup:</tt>,
hot backup cursor, See also: @ref hot_backup}
  @row{<tt>colgroup:\<table name\>:\<column group name\></tt>,
column group cursor,}
  @row{<tt>index:\<table name\>:\<index name\></tt>,
index cursor (key=index key\, value=table value),}
  @row{<tt>metadata:</tt>,
metadata cursor, See also: @ref metadata}
  @row{<tt>statistics:[\<data source URI\>]</tt>,
database or file statistics (key=(int)\,
value=(string)description\, (string)value\, (uint64_t)value),}
  @row{<tt>table:\<table name\></tt>,
table cursor (key=table key\, value=table value),}
</table>

It is also possible to open cursors on the following low-level types:

<table>
  @row{<tt>file:\<file name\></tt>,
file cursor (key=file key\, value=file value),}
  @row{<tt>lsm:\<name\></tt>,
LSM cursor (key=LSM key\, value=LSM value), See also: @ref lsm}
</table>

See @subpage data_sources for the full list.

@section cursor_projections Projections

Cursors on tables and indices can return a subset of columns.  This is done by
listing the column names in parenthesis in the <code>uri</code> parameter to
WT_SESSION::open_cursor.  Only the fields from the listed columns are returned
by WT_CURSOR::get_value.

The @ex_ref{ex_schema.c} example creates a table where the value format is
\c "5sHq", where the initial string is the country, the short is a year,
and the long is a population.  The following example lists just the country
and year columns from the table record values:

@snippet ex_schema.c Return a subset of values from the table

This is particularly useful with index cursors, because if all columns in
the projection are available in the index (including primary key columns,
which are the values of the index), the data can be read from the index
without accessing any column groups.  See @ref schema_index_projections for
more information.

@section cursor_raw Raw mode

Cursors can be configured for raw mode by specifying the \c "raw" config
keyword to WT_SESSION::open_cursor.  In this mode, the methods
WT_CURSOR::get_key, WT_CURSOR::get_value, WT_CURSOR::set_key and
WT_CURSOR::set_value all take a single WT_ITEM in the variable-length
argument list instead of a separate argument for each column.

WT_ITEM structures do not need to be cleared before use.

For WT_CURSOR::get_key and WT_CURSOR::get_value in raw mode, the WT_ITEM
can be split into columns by calling WT_EXTENSION_API::struct_unpack
with the cursor's \c key_format or \c value_format, respectively.  For
WT_CURSOR::set_key and WT_CURSOR::set_value in raw mode, the WT_ITEM
should be equivalent to calling WT_EXTENSION_API::struct_pack for the
cursor's \c key_format or \c value_format, respectively.

The @ex_ref{ex_schema.c} example creates a table where the value format is
\c "5sHq", where the initial string is the country, the short is a year,
and the long is a population.  The following example lists the table record
values, using raw mode:

@snippet ex_schema.c List the records in the table using raw mode.

Raw mode can be used in combination with projections.  The following
example lists just the country and year columns from the table record
values, using raw mode:

@snippet ex_schema.c Return a subset of values from the table using raw mode

*/
