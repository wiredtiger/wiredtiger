/*! @page timestamp_misc Miscellaneous timestamp topics

@section timestamp_misc_rts Using rollback-to-stable with timestamps

Applications can explicitly roll back the system to a specific stable timestamp
by calling the WT_CONNECTION::rollback_to_stable method. Applications must first
set the \c stable timestamp using WT_CONNECTION::set_timestamp and then call
WT_CONNECTION::rollback_to_stable, which will discard all updates to
checkpoint-durable tables that have commit timestamps more recent than the set
stable timestamp.

Logged tables and updates made without an associated commit timestamp are
unaffected.

The database must be quiescent during this process. Applications should close
or reset all open cursors before calling the WT_CONNECTION::rollback_to_stable
method.

@section timestamp_misc_diagnostic Using diagnostic configurations to enforce timestamp usage

The WT_SESSION::create method supports additional checking of timestamp usage on
a per-key or per-table basis. While these usage checks can decrease application
performance and applications may not choose to configure them in production
settings, they are strongly recommended during development.

Setting the \c write_timestamp_usage configuration specifies how timestamps are
expected to be used by the table:

| Configuration | Description |
|---------------|-------------|
| always | Require all updates to the table have a commit timestamp. |
| never | Require no updates to the table have a commit timestamp. |
| ordered | Allow updates both with and without a commit timestamp, but once a commit timestamp is used when updating a key in the table, all future updates to the key require a commit timestamp as well; each update must have a later commit timestamp than the previous update. |
| mixed_mode | Allow updates both with and without a commit timestamp; each update must have a later commit timestamp than the previous update, or no timestamp at all. |

The \c write_timestamp_usage configuration is expected to be used with the
\c assert and \c verbose configurations to the WT_SESSION::create method. The
\c "assert(read_timestamp)" configuration requires timestamps always or never
be used on reads in the table. The \c "assert(write_timestamp)" configuration
maps to the \c write_timestamp_usage setting. In both cases, setting the
\c verbose configuration results in an error message if WiredTiger detects a
violation of the configured policy. Setting the \c assert configuration will
result in an error message as well as transaction commit failure if WiredTiger
detects a violation of policy. Finally, if \c "debug_mode=(corruption_abort)"
is configured to ::wiredtiger_open and the library has been built in diagnostic
mode, setting the \c assert configuration will result in a core dump from
inside the commit check if WiredTiger detects a violation of policy.

\warning
This is a best-effort check by WiredTiger, and there are cases where
application misbehavior will not be detected.

@section timestamp_misc_reset_snapshot Resetting the snapshot

Transactions that have not set \c read_timestamp can use
WT_SESSION::reset_snapshot with timestamped tables as with
non-timestamped tables, to get a new snapshot of the database to read
from. See @ref snapshot_reset.
Transactions that have set \c read_timestamp can also call
WT_SESSION::reset_snapshot, but it will have no effect.

@section timestamps_misc_in_memory In-memory configurations and timestamps

Timestamps are supported for in-memory databases.

*/
