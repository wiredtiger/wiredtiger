/*! @page file_formats File formats and compression

@section file_formats_formats File formats

WiredTiger supports row-store. It is a B+tree implementations of
a key/value store. In addition, there is experimental support for
@ref tiered_storage, allowing a B+tree to span multiple files and
cloud objects.

In a row-store, both keys and data are variable-length byte strings.

Generally, row-stores are faster for queries where all of the columns
are required by every lookup (because there's only a single set of
meta-data pages to read into the cache and search).

Row-store keys and values can be up to (4GB - 512B) in length.  Keys and
values too large to fit on a normal page are stored as overflow items
in the file, and are likely to require additional file I/O to access.

WiredTiger does not support duplicate data items: there can be only a
single value associated with any given key, and applications are
responsible for creating unique key/value pairs.

WiredTiger allocates space from the underlying files in block units.
The minimum file allocation unit WiredTiger supports is 512B and the
maximum is 512MB.  File offsets are signed 8B values, making the maximum
file size very, very large.

@section file_formats_compression File formats and compression

Row-stores support four types of compression: key prefix compression,
dictionary compression and block compression.

- Key prefix compression reduces the size requirement of both in-memory
and on-disk objects by storing any identical key prefix only once per
page.

  The cost is additional CPU and memory when operating on the in-memory tree.
Specifically, sequential cursor movement through prefix-compressed page in
reverse (but not forward) order, or the random lookup of a key/value pair will
allocate sufficient memory to hold some number of uncompressed keys.  So, for
example, if key prefix compression only saves a small number of bytes per key,
the additional memory cost of instantiating the uncompressed key may mean
prefix compression is not worthwhile.  Further, in cases where the
on-disk cost is the primary concern, block compression may mean prefix
compression is less useful.

  Applications may limit the use of prefix compression by configuring the
minimum number of bytes that must be gained before prefix compression is
used with the WT_SESSION::create method's \c prefix_compression_min
configuration string.

  Key prefix compression is disabled by default.

- Dictionary compression reduces the size requirement of both the
in-memory and on-disk objects by storing any identical value only once
per page.  The cost is minor additional CPU and memory use when writing
pages to disk.

  Dictionary compression is disabled by default.

- Block compression reduces the size requirement of on-disk objects by
compressing blocks of the backing object's file.  The cost is additional
CPU and memory use when reading and writing pages to disk.  Note the
additional CPU cost of block compression can be high, and should be
considered.   (See @ref compression_considerations for details.)

  Block compression is disabled by default.

- Dictionary compression reduces the size requirement of both the
in-memory and on-disk objects by storing any identical value only once
per page.  The cost is minor additional CPU and memory use when
returning values from the in-memory tree and when writing pages to disk.

  Dictionary compression is disabled by default.

- Block compression reduces the size requirement of on-disk objects by
compressing blocks of the backing object's file.  The cost is additional
CPU and memory use when reading and writing pages to disk.  Note the
additional CPU cost of block compression can be high, and should be
considered.   (See @ref compression_considerations for details.)

  Block compression is disabled by default.

Fixed-length column stores support a single type of compression: block
compression.

- Block compression reduces the size requirement of on-disk objects by
compressing blocks of the backing object's file.  The cost is additional
CPU and memory use when reading and writing pages to disk.  Note the
additional CPU cost of block compression can be high, and should be
considered.   (See @ref compression_considerations for details.)

  Block compression is disabled by default.

*/
