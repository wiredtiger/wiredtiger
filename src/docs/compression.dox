/*! @page compression Compressors

This section explains how to configure WiredTiger's builtin support for
the snappy and bzip2 compression engines.

@section compression_zlib Using zlib compression

To use the builtin support for Greg Roelofs' and Mark Adler's
<a href="http://www.zlib.net/">zlib</a>
compression, first check that zlib is installed in include and library
directories searched by the compiler.  Once zlib is installed, you can
enable zlib using the \c --enable-zlib option to configure.

If zlib is installed in a location not normally searched by the compiler
toolchain, you'll need to modify the \c CPPFLAGS and \c LDFLAGS to
indicate these locations.  For example, with the zlib includes and
libraries installed in \c /usr/local/include and \c /usr/local/lib, you
would run configure with the following additional arguments:

@code
--enable-zlib CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/include"
@endcode

When opening the WiredTiger database, load the zlib shared library as
an extension.  For example, with the WiredTiger library installed in
\c /usr/local/lib, you would use the following extension:

@snippet ex_all.c Configure zlib extension

Finally, when creating the WiredTiger object, set \c block_compressor
to \c zlib:

@snippet ex_all.c Create a zlib compressed table

@section compression_snappy Using snappy compression

To use the builtin support for
<a href="http://code.google.com/p/snappy/">Google's snappy</a>
compression, first check that snappy is installed in include and library
directories searched by the compiler.  Once snappy is installed, you can
enable snappy using the \c --enable-snappy option to configure.

If snappy is installed in a location not normally searched by the
compiler toolchain, you'll need to modify the \c CPPFLAGS and \c LDFLAGS
to indicate these locations.  For example, with the snappy includes and
libraries installed in \c /usr/local/include and \c /usr/local/lib, you
would run configure with the following additional arguments:

@code
--enable-snappy CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/include"
@endcode

When opening the WiredTiger database, load the snappy shared library as
an extension.  For example, with the WiredTiger library installed in
\c /usr/local/lib, you would use the following extension:

@snippet ex_all.c Configure snappy extension

Finally, when creating the WiredTiger object, set \c block_compressor
to \c snappy:

@snippet ex_all.c Create a snappy compressed table

@section compression_bzip2 Using bzip2 compression

To use the builtin support for
<a href="http://www.bzip.org/">Julian Seward's bzip2</a>
compression, first check that bzip2 is installed in include and library
directories searched by the compiler.  Once bzip2 is installed, you can
enable bzip2 using the \c --enable-bzip2 option to configure.

If bzip2 is installed in a location not normally searched by the
compiler toolchain, you'll need to modify the \c CPPFLAGS and \c LDFLAGS
to indicate these locations.  For example, with the bzip2 includes and
libraries installed in \c /usr/local/include and \c /usr/local/lib, you
would run configure with the following additional arguments:

@code
--enable-bzip2 CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/include"
@endcode

When opening the WiredTiger database, load the bzip2 shared library as
an extension.  For example, with the WiredTiger library installed in
\c /usr/local/lib, you would use the following extension:

@snippet ex_all.c Configure bzip2 extension

Finally, when creating the WiredTiger object, set \c block_compressor
to \c bzip2:

@snippet ex_all.c Create a bzip2 compressed table

@section compression_upgrading Upgrading compression engines

WiredTiger does not store information with file blocks to identify the
compression engine used to compressed the block.  Applications wanting
to upgrade to some future compression engine (without requiring a file
dump and re-load), should ensure each compressed block includes enough
information to identify the compression engine used, so its compression
code can correctly decompress old and new blocks.

@section compression_custom Custom compression engines

WiredTiger may be extended by adding custom compression engines; see
@ref WT_COMPRESSOR for more information.

 */
