/*! @page message_handling Message handling

@section event_message_handling Message handling using the WT_EVENT_HANDLER

Specific error and other message handling can be configured by passing an
implementation of WT_EVENT_HANDLER to ::wiredtiger_open or
WT_CONNECTION::open_session.

For example, both informational and error messages might be passed to an
application-specific logging function that added a timestamp and logged
the message to a file, and error messages might additionally be output to
the \c stderr file stream.

Additionally, applications will normally handle \c WT_PANIC as a special
case.  WiredTiger will always call the error handler callback with
\c WT_PANIC in the case of a fatal error requiring database restart,
however, WiredTiger cannot guarantee applications will see an application
thread return \c WT_PANIC from a WiredTiger API call. For this reason, a
correctly-written WiredTiger application will likely specify at least an
error handler which will immediately exit or otherwise handle fatal errors.
Note that no further WiredTiger calls are required after an error handler
is called with \c WT_PANIC (and further calls will themselves immediately
fail).

The following is a programmatic example of creating a custom event handler:

@snippet ex_event_handler.c Function event_handler

The following is a programmatic example of configuring the previously defined custom event handler:

@snippet ex_event_handler.c Configure event_handler

*/
