/*! @page message_handling Message handling

@section message_handling_event_handler Message handling using the WT_EVENT_HANDLER

Specific error and other message handling can be configured by passing an
implementation of WT_EVENT_HANDLER to ::wiredtiger_open or
WT_CONNECTION::open_session.

For example, both informational and error messages might be passed to an
application-specific logging function that added a timestamp and logged
the message to a file, and error messages might additionally be output to
the \c stderr file stream.

Additionally, applications will normally handle \c WT_PANIC as a special
case. WiredTiger will always call the error handler callback with
\c WT_PANIC in the case of a fatal error requiring database restart,
however, WiredTiger cannot guarantee applications will see an application
thread return \c WT_PANIC from a WiredTiger API call. For this reason, a
correctly-written WiredTiger application will likely specify at least an
error handler which will immediately exit or otherwise handle fatal errors.
Note that no further WiredTiger calls are required after an error handler
is called with \c WT_PANIC (and further calls will themselves immediately
fail).

The following is a programmatic example of creating a custom event handler:

@snippet ex_event_handler.c Function event_handler

The following is a programmatic example of configuring the previously defined custom event handler:

@snippet ex_event_handler.c Configure event_handler

@section message_handling_output Output format of the WT_EVENT_HANDLER

The messages generated by the WT_EVENT_HANDLER can follow a flat string style format or can be
encoded in the JSON format.

@subsection message_handling_output_flat_string Flat string format

By default, all the messages going through the WT_EVENT_HANDLER are generated as flat strings.
Example of a message following the flat string format:

@code
[1637732238:116292][11175:0x7fd106107740], test_salvage.test_salvage.test_salvage_api(column-fix), file:test_salvage.a.wt, WT_SESSION.salvage: [WT_VERB_SALVAGE_PROGRESS][INFO]: WT_SESSION.salvage
@endcode

@subsection message_handling_output_json JSON format

The connection setting \c json_ouput can be configured to enable JSON encoding for specific message
categories. For instance, to print all \b general and \b error messages in JSON format, the
following setting needs to be added to the connection configuration:

@code
json_output=(message, error)
@endcode

Any type of message that is not specified in the list assigned to the \c json_output setting will be
generated following the flat string format. When the json_output setting is not specified, all
messages are generated as flat strings.

The JSON output follows a specific schema with the following fields:

<table>
@hrow{Field, Description}
@row{category, Message category defined by \c WT_VERBOSE_CATEGORY}
@row{category_id, Value representation of the message category}
@row{error_code, Value representation of the error}
@row{error_str, Error message}
@row{msg, Message}
@row{session_dhandle_name, Session dhandle name}
@row{session_err_prefix, Database error prefix defined in the \c WT_CONNECTION_IMPL structure}
@row{session_name, Session name}
@row{ts_sec, Time in seconds at which the message was generated}
@row{ts_uec, Time in microseconds at which the message was generated}
@row{verbose_level, Severity level associated with the message. See @ref verbose_messaging for more
details}
@row{verbose_level_id, Value representation of the verbose level}
</table>

Note: The information present in a message depends on the available data at the time when the
message is generated. In other words, all the fields defined above may not be present in a message
as shown in the example below:

@code
{
    "category":"WT_VERB_SALVAGE_PROGRESS",
    "category_id":31,
    "msg":"WT_SESSION.salvage"
    "session_dhandle_name":"file:test_salvage.a.wt",
    "session_err_prefix":"test_salvage.test_salvage.test_salvage_api(column-fix)",
    "session_name":"WT_SESSION.salvage",
    "thread":"22604:0x7fe5e47a3740",
    "ts_sec":1637730626,
    "ts_usec":20915,
    "verbose_level":"INFO",
    "verbose_level_id":0,
}
@endcode

*/
