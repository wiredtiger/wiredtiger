/*! @arch_page arch-row-column Row Store and Column Store

@section row_column_definition Definition

WiredTiger supports only row-stores and is represented internally by a B-Tree. Keys and values in
row-stores can be of variable length. Furthermore, keys are explicitly stored.

@section row_column_rs Row-stores

Row-stores are probably seen as the traditional access method and they serve a general purpose. In
WiredTiger, row-store keys are explicitly stored and they can be duplicated within the same single
file which directly impacts the on-disk storage size. However, keys are only duplicated if they are
the first key on the page, which gets them copied/promoted to an internal page. They are not
necessarily duplicated, too, they can be prefix/suffix compressed to discard unnecessary bytes on
the internal pages.

<table>
@hrow{, Row Store}
@row{Characteristics,}
@row{Internal representation, B-Tree (\c WT_BTREE)}
@row{B-Tree type, Generalized (\c BTREE_ROW)}
@row{Leaf pages, Key count equal to half the number of physical entries (unless all empty values flag is set where key count is equal to the number of physical entries)}
@row{Record key, Anything (byte-string) prefix compressed or overflow objects}
@row{Record value, Variable byte string length}
@row{Features,}
@row{Random cursor, Yes}
@row{Block compression, Yes}
@row{Dictionary compression, Yes}
@row{Fast truncate, Yes}
@row{Prefix and suffix compression, Yes}
</table>

*/
