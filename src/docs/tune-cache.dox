/*! @page tune_cache Cache

@section tuning_cache_size Cache size

The size of the cache is the single most important tuning knob for a
WiredTiger application.  Ideally the cache should be configured to be
large enough to hold an application's working set.

The cache size for the database is normally configured by setting the
\c cache_size configuration string when calling the ::wiredtiger_open
function.  The cache size can be adjusted after the open call with
WT_CONNECTION::reconfigure.

An example of setting a cache size to 500MB:

@snippet ex_config.c configure cache size

The effectiveness of the chosen cache size can be measured by reviewing
the page eviction statistics for the database.

@section tuning_cache_resident Cache resident objects

Cache resident objects (objects never considered for the purposes of
cache eviction), can be configured with the WT_SESSION::create
"cache_resident" configuration string.

Configuring a cache resident object has two effects: first, once the
object's pages have been instantiated in memory, no further I/O cost is
ever paid for object access, minimizing potential latency.  Second,
in-memory objects can be accessed faster than objects tracked for
potential eviction, and applications able to guarantee sufficient memory
that an object need never be evicted can significantly increase their
performance.

An example of configuring a cache-resident object:

@snippet ex_all.c Create a cache-resident object

@section cache_eviction Eviction tuning

When an application approaches the maximum cache size, WiredTiger begins
eviction to stop memory use from growing too large, approximating a
least-recently-used algorithm.

WiredTiger provides several configuration options for tuning how pages
are evicted from the cache. Different values will improve performance
depending on an application's particular workload.  Generally, eviction
tuning is more important for applications for which latency is a primary
concern, because eviction can cause latency spikes for worker threads.

WiredTiger eviction tuning options can be configured when first opening
a database via @ref wiredtiger_open, or changed after open with
WT_CONNECTION::reconfigure.

The \c eviction_trigger configuration value is the percentage of the
total cache size that will start eviction.  By default, eviction begins
when the cache is 95% full, however, an application concerned about a
latency spike as the cache becomes full might want to begin eviction
earlier.

The \c eviction_target configuration value is the overall target for
eviction, expressed as a percentage of total cache size; that is, once
eviction begins, it will proceed until the target percentage of bytes
in the cache is reached.  Note the \c eviction_target configuration
value is ignored until eviction is triggered.

The \c eviction_dirty_target configuration value is the overall dirty
byte target for eviction, expressed as a percentage of total cache size;
that is, once eviction begins, it will proceed until the target
percentage of dirty bytes in the cache is reached.  Note the
\c eviction_dirty_target configuration value is ignored until eviction
is triggered.

@snippet ex_all.c Eviction configuration

By default, WiredTiger cache eviction is handled by a single, separate
thread.  In a large, busy cache, a single thread will be insufficient
(especially when the eviction thread must wait for I/O).  Further, if
the eviction thread falls behind, application threads will be taken and
used for eviction, potentially resulting in latency spikes.  The \c
eviction_workers configuration value can be used to configure additional
WiredTiger threads to support eviction.

@snippet ex_all.c Eviction worker configuration

 */
