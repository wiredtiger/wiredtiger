#!/usr/bin/env python
#
# Public Domain 2008-2013 WiredTiger, Inc.
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

import fileinput, os, re, shutil, sys, textwrap
from collections import defaultdict
from datetime import datetime
from time import mktime
from subprocess import call

try:
    from stat_data import no_scale_per_second_list
except ImportError:
    print >>sys.stderr, "Could not import stat_data.py, it should be in the same directory as %s" % sys.argv[0]
    sys.exit(-1)

try:
    from nvd3 import lineChart, lineWithFocusChart
except ImportError:
    print >>sys.stderr, "Could not import nvd3.  Please install it *from source* from https://github.com/areski/python-nvd3.git (other versions may be missing features that we rely on)"
    sys.exit(-1)

TIMEFMT = "%b %d %H:%M:%S"

thisyear = datetime.today().year
def parsetime(s):
    return datetime.strptime(s, TIMEFMT).replace(year=thisyear)

# Plot a set of entries for a title.
def munge(title, values):
    # sometimes there is a common prefix and/or suffix on every record
    #ylabel = ' '.join(title.split(' ')[1:]).lower()
    ylabel = ' '.join(title.split(' ')).lower()
    if title.split(' ', 1)[1] in no_scale_per_second_list:
        seconds = 1
    else:
        t1, v1 = values[1]
        seconds = (parsetime(t1) - start_time).seconds
        ylabel += ' per second'
	if seconds == 0:
		seconds = 1

    # Write the raw data into a file for processing.
    yvalues = []
    for t, v in sorted(values):
        yvalues.append(float(v) / seconds)

    return ylabel, yvalues

# Parse the command line
import argparse

parser = argparse.ArgumentParser(description='Create graphs from WiredTIger statistics.')
parser.add_argument('--abstime', action='store_true',
    help='use absolute time on the x axis')
parser.add_argument('--focus', action='store_true',
    help='generate a chart with focus slider')
parser.add_argument('--include', '-I', metavar='regexp',
    type=re.compile, action='append',
    help='include series with titles matching the specifed regexp')
parser.add_argument('--list', action='store_true',
    help='list the series that would be displayed')
parser.add_argument('--output', '-o', metavar='file', default='wtstats.html',
    help='HTML output file')
parser.add_argument('files', metavar='file', nargs='+',
    help='input files generated by WiredTiger statistics logging')
args = parser.parse_args()

# Read the input file(s) into a dictionary of lists.
d = defaultdict(list)
for f in args.files:
    for line in open(f, 'rU'):
        month, day, time, v, title = line.strip('\n').split(" ", 4)
        d[title].append((month + " " + day + " " + time, v))

for title, values in sorted(d.iteritems()):
    # Ignore entries where the value never changes.
    skip = True
    t0, v0 = values[0]
    for t, v in values:
        if v != v0:
            skip = False
            break
    if skip:
        del d[title]

start_time = parsetime(t0)

if args.abstime:
    # Build the time series, milliseconds since the epoch
    xdata = [int(mktime(parsetime(t).timetuple())) * 1000 for t, v in values]
else:
    # Build the time series as seconds since the start of the data
    xdata = [(parsetime(t) - start_time).seconds for t, v in values]
ydata = []

# Common prefix / suffix elimination
prefix = suffix = None

def common_prefix(a, b):
    while not b.startswith(a):
        a = a[:-1]
    return a

def common_suffix(a, b):
    while not a.endswith(b):
        b = b[1:]
    return b

# Process the series, eliminate constants
for title, values in sorted(d.iteritems()):
    title, values = munge(title, values)
    # Ignore entries if a list of regular expressions was given
    if args.include and not [r for r in args.include if r.search(title)]:
        continue
    prefix = title if prefix is None else common_prefix(prefix, title)
    suffix = title if suffix is None else common_suffix(title, suffix)
    ydata.append((title, values))

# Process titles, eliminate common prefixes and suffixes
if prefix or suffix:
    old_ydata = ydata
    ydata = []
    for title, values in old_ydata:
        title = title[len(prefix):]
        if suffix:
            title = title[:-len(suffix)]
        ydata.append((title, values))

# Dump the results as a CSV file
#print '"time", ' + ', '.join('"%s"' % title for title, values in ydata)
#for i in xrange(len(xdata)):
#    print '%d, %s' % (xdata[i], ', '.join('%g' % values[i] for title, values in ydata))

# Are we just listing the results?
if args.list:
    for title, values in ydata:
        print title
    sys.exit(0)

# open the output file
output_file = open(args.output, 'w')
#---------------------------------------
if args.focus:
    chart = lineWithFocusChart(name='statlog', height=450 + 10 * len(ydata), x_is_date=args.abstime, x_axis_format='%H:%M:%S', y_axis_format='g', assets_directory='http://source.wiredtiger.com/graphs/')
else:
    chart = lineChart(name='statlog', height=450 + 10 * len(ydata), x_is_date=args.abstime, y_axis_format='g', assets_directory='http://source.wiredtiger.com/graphs/')

for title, values in ydata:
    chart.add_serie(y=values, x=xdata, name=title)

chart.buildhtml()
output_file.write(chart.htmlcontent)

#close Html file
output_file.close()
